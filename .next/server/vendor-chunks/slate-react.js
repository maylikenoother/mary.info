"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate-react";
exports.ids = ["vendor-chunks/slate-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/slate-react/dist/index.es.js":
/*!***************************************************!*\
  !*** ./node_modules/slate-react/dist/index.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultElement: () => (/* binding */ DefaultElement),\n/* harmony export */   DefaultLeaf: () => (/* binding */ DefaultLeaf),\n/* harmony export */   DefaultPlaceholder: () => (/* binding */ DefaultPlaceholder),\n/* harmony export */   Editable: () => (/* binding */ Editable),\n/* harmony export */   ReactEditor: () => (/* binding */ ReactEditor),\n/* harmony export */   Slate: () => (/* binding */ Slate),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useFocused: () => (/* binding */ useFocused),\n/* harmony export */   useReadOnly: () => (/* binding */ useReadOnly),\n/* harmony export */   useSelected: () => (/* binding */ useSelected),\n/* harmony export */   useSlate: () => (/* binding */ useSlate),\n/* harmony export */   useSlateSelection: () => (/* binding */ useSlateSelection),\n/* harmony export */   useSlateSelector: () => (/* binding */ useSlateSelector),\n/* harmony export */   useSlateStatic: () => (/* binding */ useSlateStatic),\n/* harmony export */   useSlateWithV: () => (/* binding */ useSlateWithV),\n/* harmony export */   withReact: () => (/* binding */ withReact)\n/* harmony export */ });\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! direction */ \"(ssr)/./node_modules/direction/index.js\");\n/* harmony import */ var direction__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(direction__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/debounce */ \"(ssr)/./node_modules/lodash/debounce.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/throttle */ \"(ssr)/./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! scroll-into-view-if-needed */ \"(ssr)/./node_modules/scroll-into-view-if-needed/dist/index.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @juggle/resize-observer */ \"(ssr)/./node_modules/@juggle/resize-observer/lib/exports/resize-observer.js\");\n/* harmony import */ var is_hotkey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! is-hotkey */ \"(ssr)/./node_modules/slate-react/node_modules/is-hotkey/lib/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * A React context for sharing the editor object.\n */ var EditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */ var useSlateStatic = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\nvar REACT_MAJOR_VERSION = parseInt(react__WEBPACK_IMPORTED_MODULE_3___default().version.split(\".\")[0], 10);\nvar IS_IOS = typeof navigator !== \"undefined\" && \"undefined\" !== \"undefined\" && 0 && 0;\nvar IS_APPLE = typeof navigator !== \"undefined\" && /Mac OS X/.test(navigator.userAgent);\nvar IS_ANDROID = typeof navigator !== \"undefined\" && /Android/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== \"undefined\" && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_WEBKIT = typeof navigator !== \"undefined\" && /AppleWebKit(?!.*Chrome)/i.test(navigator.userAgent);\n// \"modern\" Edge was released at 79.x\nvar IS_EDGE_LEGACY = typeof navigator !== \"undefined\" && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(?:\\.)/i.test(navigator.userAgent);\nvar IS_CHROME = typeof navigator !== \"undefined\" && /Chrome/i.test(navigator.userAgent);\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nvar IS_CHROME_LEGACY = typeof navigator !== \"undefined\" && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(?:\\.)/i.test(navigator.userAgent);\nvar IS_ANDROID_CHROME_LEGACY = IS_ANDROID && typeof navigator !== \"undefined\" && /Chrome?\\/(?:[0-5]?\\d)(?:\\.)/i.test(navigator.userAgent);\n// Firefox did not support `beforeInput` until `v87`.\nvar IS_FIREFOX_LEGACY = typeof navigator !== \"undefined\" && /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])(?:\\.)).*/i.test(navigator.userAgent);\n// UC mobile browser\nvar IS_UC_MOBILE = typeof navigator !== \"undefined\" && /.*UCBrowser/.test(navigator.userAgent);\n// Wechat browser (not including mac wechat)\nvar IS_WECHATBROWSER = typeof navigator !== \"undefined\" && /.*Wechat/.test(navigator.userAgent) && !/.*MacWechat/.test(navigator.userAgent); // avoid lookbehind (buggy in safari < 16.4)\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nvar CAN_USE_DOM = !!( false && 0);\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nvar HAS_BEFORE_INPUT_SUPPORT = (!IS_CHROME_LEGACY || !IS_ANDROID_CHROME_LEGACY) && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers\ntypeof globalThis !== \"undefined\" && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.\ntypeof globalThis.InputEvent.prototype.getTargetRanges === \"function\";\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */ var NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */ var EDITOR_TO_WINDOW = new WeakMap();\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar EDITOR_TO_PLACEHOLDER_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\nvar EDITOR_TO_KEY_TO_ELEMENT = new WeakMap();\n/**\n * Weak maps for storing editor-related state.\n */ var IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\nvar IS_COMPOSING = new WeakMap();\nvar EDITOR_TO_USER_SELECTION = new WeakMap();\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */ var EDITOR_TO_ON_CHANGE = new WeakMap();\n/**\n * Weak maps for saving pending state on composition stage.\n */ var EDITOR_TO_SCHEDULE_FLUSH = new WeakMap();\nvar EDITOR_TO_PENDING_INSERTION_MARKS = new WeakMap();\nvar EDITOR_TO_USER_MARKS = new WeakMap();\n/**\n * Android input handling specific weak-maps\n */ var EDITOR_TO_PENDING_DIFFS = new WeakMap();\nvar EDITOR_TO_PENDING_ACTION = new WeakMap();\nvar EDITOR_TO_PENDING_SELECTION = new WeakMap();\nvar EDITOR_TO_FORCE_RENDER = new WeakMap();\n/**\n * Symbols.\n */ var PLACEHOLDER_SYMBOL = Symbol(\"placeholder\");\nvar MARK_PLACEHOLDER_SYMBOL = Symbol(\"mark-placeholder\");\n/**\n * Types.\n */ // COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nvar DOMText = globalThis.Text;\n/**\n * Returns the host window of a DOM node\n */ var getDefaultView = (value)=>{\n    return value && value.ownerDocument && value.ownerDocument.defaultView || null;\n};\n/**\n * Check if a DOM node is a comment node.\n */ var isDOMComment = (value)=>{\n    return isDOMNode(value) && value.nodeType === 8;\n};\n/**\n * Check if a DOM node is an element node.\n */ var isDOMElement = (value)=>{\n    return isDOMNode(value) && value.nodeType === 1;\n};\n/**\n * Check if a value is a DOM node.\n */ var isDOMNode = (value)=>{\n    var window1 = getDefaultView(value);\n    return !!window1 && value instanceof window1.Node;\n};\n/**\n * Check if a value is a DOM selection.\n */ var isDOMSelection = (value)=>{\n    var window1 = value && value.anchorNode && getDefaultView(value.anchorNode);\n    return !!window1 && value instanceof window1.Selection;\n};\n/**\n * Check if a DOM node is an element node.\n */ var isDOMText = (value)=>{\n    return isDOMNode(value) && value.nodeType === 3;\n};\n/**\n * Checks whether a paste event is a plaintext-only event.\n */ var isPlainTextOnlyPaste = (event)=>{\n    return event.clipboardData && event.clipboardData.getData(\"text/plain\") !== \"\" && event.clipboardData.types.length === 1;\n};\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */ var normalizeDOMPoint = (domPoint)=>{\n    var [node, offset] = domPoint;\n    // If it's an element node, its offset refers to the index of its children\n    // including comment nodes, so try to find the right text child node.\n    if (isDOMElement(node) && node.childNodes.length) {\n        var isLast = offset === node.childNodes.length;\n        var index = isLast ? offset - 1 : offset;\n        [node, index] = getEditableChildAndIndex(node, index, isLast ? \"backward\" : \"forward\");\n        // If the editable child found is in front of input offset, we instead seek to its end\n        isLast = index < offset;\n        // If the node has children, traverse until we have a leaf node. Leaf nodes\n        // can be either text nodes, or other void DOM nodes.\n        while(isDOMElement(node) && node.childNodes.length){\n            var i = isLast ? node.childNodes.length - 1 : 0;\n            node = getEditableChild(node, i, isLast ? \"backward\" : \"forward\");\n        }\n        // Determine the new offset inside the text node.\n        offset = isLast && node.textContent != null ? node.textContent.length : 0;\n    }\n    // Return the node and offset.\n    return [\n        node,\n        offset\n    ];\n};\n/**\n * Determines whether the active element is nested within a shadowRoot\n */ var hasShadowRoot = (node)=>{\n    var parent = node && node.parentNode;\n    while(parent){\n        if (parent.toString() === \"[object ShadowRoot]\") {\n            return true;\n        }\n        parent = parent.parentNode;\n    }\n    return false;\n};\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */ var getEditableChildAndIndex = (parent, index, direction)=>{\n    var { childNodes } = parent;\n    var child = childNodes[index];\n    var i = index;\n    var triedForward = false;\n    var triedBackward = false;\n    // While the child is a comment node, or an element node with no children,\n    // keep iterating to find a sibling non-void, non-comment node.\n    while(isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute(\"contenteditable\") === \"false\"){\n        if (triedForward && triedBackward) {\n            break;\n        }\n        if (i >= childNodes.length) {\n            triedForward = true;\n            i = index - 1;\n            direction = \"backward\";\n            continue;\n        }\n        if (i < 0) {\n            triedBackward = true;\n            i = index + 1;\n            direction = \"forward\";\n            continue;\n        }\n        child = childNodes[i];\n        index = i;\n        i += direction === \"forward\" ? 1 : -1;\n    }\n    return [\n        child,\n        index\n    ];\n};\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */ var getEditableChild = (parent, index, direction)=>{\n    var [child] = getEditableChildAndIndex(parent, index, direction);\n    return child;\n};\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */ var getPlainText = (domNode)=>{\n    var text = \"\";\n    if (isDOMText(domNode) && domNode.nodeValue) {\n        return domNode.nodeValue;\n    }\n    if (isDOMElement(domNode)) {\n        for (var childNode of Array.from(domNode.childNodes)){\n            text += getPlainText(childNode);\n        }\n        var display = getComputedStyle(domNode).getPropertyValue(\"display\");\n        if (display === \"block\" || display === \"list\" || domNode.tagName === \"BR\") {\n            text += \"\\n\";\n        }\n    }\n    return text;\n};\n/**\n * Get x-slate-fragment attribute from data-slate-fragment\n */ var catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m;\nvar getSlateFragmentAttribute = (dataTransfer)=>{\n    var htmlData = dataTransfer.getData(\"text/html\");\n    var [, fragment] = htmlData.match(catchSlateFragment) || [];\n    return fragment;\n};\n/**\n * Check whether a mutation originates from a editable element inside the editor.\n */ var isTrackedMutation = (editor, mutation, batch)=>{\n    var { target } = mutation;\n    if (isDOMElement(target) && target.matches('[contentEditable=\"false\"]')) {\n        return false;\n    }\n    var { document: document1 } = ReactEditor.getWindow(editor);\n    if (document1.contains(target)) {\n        return ReactEditor.hasDOMNode(editor, target, {\n            editable: true\n        });\n    }\n    var parentMutation = batch.find((_ref)=>{\n        var { addedNodes, removedNodes } = _ref;\n        for (var node of addedNodes){\n            if (node === target || node.contains(target)) {\n                return true;\n            }\n        }\n        for (var _node of removedNodes){\n            if (_node === target || _node.contains(target)) {\n                return true;\n            }\n        }\n    });\n    if (!parentMutation || parentMutation === mutation) {\n        return false;\n    }\n    // Target add/remove is tracked. Track the mutation if we track the parent mutation.\n    return isTrackedMutation(editor, parentMutation, batch);\n};\n/**\n * An auto-incrementing identifier for keys.\n */ var n = 0;\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */ class Key {\n    constructor(){\n        _defineProperty(this, \"id\", void 0);\n        this.id = \"\".concat(n++);\n    }\n}\n// eslint-disable-next-line no-redeclare\nvar ReactEditor = {\n    androidPendingDiffs: (editor)=>EDITOR_TO_PENDING_DIFFS.get(editor),\n    androidScheduleFlush: (editor)=>{\n        var _EDITOR_TO_SCHEDULE_F;\n        (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(editor)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();\n    },\n    blur: (editor)=>{\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        IS_FOCUSED.set(editor, false);\n        if (root.activeElement === el) {\n            el.blur();\n        }\n    },\n    deselect: (editor)=>{\n        var { selection } = editor;\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var domSelection = root.getSelection();\n        if (domSelection && domSelection.rangeCount > 0) {\n            domSelection.removeAllRanges();\n        }\n        if (selection) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n        }\n    },\n    findDocumentOrShadowRoot: (editor)=>{\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = el.getRootNode();\n        if ((root instanceof Document || root instanceof ShadowRoot) && root.getSelection != null) {\n            return root;\n        }\n        return el.ownerDocument;\n    },\n    findEventRange: (editor, event)=>{\n        if (\"nativeEvent\" in event) {\n            event = event.nativeEvent;\n        }\n        var { clientX: x, clientY: y, target } = event;\n        if (x == null || y == null) {\n            throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n        }\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        // If the drop target is inside a void node, move it into either the\n        // next or previous node, depending on which side the `x` and `y`\n        // coordinates are closest to.\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n            var rect = target.getBoundingClientRect();\n            var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n            var edge = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.point(editor, path, {\n                edge: isPrev ? \"start\" : \"end\"\n            });\n            var point = isPrev ? slate__WEBPACK_IMPORTED_MODULE_7__.Editor.before(editor, edge) : slate__WEBPACK_IMPORTED_MODULE_7__.Editor.after(editor, edge);\n            if (point) {\n                var _range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point);\n                return _range;\n            }\n        }\n        // Else resolve a range from the caret position where the drop occured.\n        var domRange;\n        var { document: document1 } = ReactEditor.getWindow(editor);\n        // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n        if (document1.caretRangeFromPoint) {\n            domRange = document1.caretRangeFromPoint(x, y);\n        } else {\n            var position = document1.caretPositionFromPoint(x, y);\n            if (position) {\n                domRange = document1.createRange();\n                domRange.setStart(position.offsetNode, position.offset);\n                domRange.setEnd(position.offsetNode, position.offset);\n            }\n        }\n        if (!domRange) {\n            throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n        }\n        // Resolve a Slate range from the DOM range.\n        var range = ReactEditor.toSlateRange(editor, domRange, {\n            exactMatch: false,\n            suppressThrow: false\n        });\n        return range;\n    },\n    findKey: (editor, node)=>{\n        var key = NODE_TO_KEY.get(node);\n        if (!key) {\n            key = new Key();\n            NODE_TO_KEY.set(node, key);\n        }\n        return key;\n    },\n    findPath: (editor, node)=>{\n        var path = [];\n        var child = node;\n        while(true){\n            var parent = NODE_TO_PARENT.get(child);\n            if (parent == null) {\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(child)) {\n                    return path;\n                } else {\n                    break;\n                }\n            }\n            var i = NODE_TO_INDEX.get(child);\n            if (i == null) {\n                break;\n            }\n            path.unshift(i);\n            child = parent;\n        }\n        throw new Error(\"Unable to find the path for Slate node: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(node)));\n    },\n    focus: function focus(editor) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n            retries: 5\n        };\n        // Return if already focused\n        if (IS_FOCUSED.get(editor)) {\n            return;\n        }\n        // Retry setting focus if the editor has pending operations.\n        // The DOM (selection) is unstable while changes are applied.\n        // Retry until retries are exhausted or editor is focused.\n        if (options.retries <= 0) {\n            throw new Error(\"Could not set focus, editor seems stuck with pending operations\");\n        }\n        if (editor.operations.length > 0) {\n            setTimeout(()=>{\n                ReactEditor.focus(editor, {\n                    retries: options.retries - 1\n                });\n            }, 10);\n            return;\n        }\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        if (root.activeElement !== el) {\n            // Ensure that the DOM selection state is set to the editor's selection\n            if (editor.selection && root instanceof Document) {\n                var domSelection = root.getSelection();\n                var domRange = ReactEditor.toDOMRange(editor, editor.selection);\n                domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n                domSelection === null || domSelection === void 0 || domSelection.addRange(domRange);\n            }\n            // Create a new selection in the top of the document if missing\n            if (!editor.selection) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []));\n                editor.onChange();\n            }\n            el.focus({\n                preventScroll: true\n            });\n            IS_FOCUSED.set(editor, true);\n        }\n    },\n    getWindow: (editor)=>{\n        var window1 = EDITOR_TO_WINDOW.get(editor);\n        if (!window1) {\n            throw new Error(\"Unable to find a host window element for this editor\");\n        }\n        return window1;\n    },\n    hasDOMNode: function hasDOMNode(editor, target) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var { editable = false } = options;\n        var editorEl = ReactEditor.toDOMNode(editor, editor);\n        var targetEl;\n        // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n        // target is originating from an internal \"restricted\" element (e.g. a\n        // stepper arrow on a number input). (2018/05/04)\n        // https://github.com/ianstormtaylor/slate/issues/1819\n        try {\n            targetEl = isDOMElement(target) ? target : target.parentElement;\n        } catch (err) {\n            if (err instanceof Error && !err.message.includes('Permission denied to access property \"nodeType\"')) {\n                throw err;\n            }\n        }\n        if (!targetEl) {\n            return false;\n        }\n        return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === \"boolean\" && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n        // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n        targetEl.closest('[contenteditable=\"false\"]') === editorEl || !!targetEl.getAttribute(\"data-slate-zero-width\"));\n    },\n    hasEditableTarget: (editor, target)=>isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n            editable: true\n        }),\n    hasRange: (editor, range)=>{\n        var { anchor, focus } = range;\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, anchor.path) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, focus.path);\n    },\n    hasSelectableTarget: (editor, target)=>ReactEditor.hasEditableTarget(editor, target) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, target),\n    hasTarget: (editor, target)=>isDOMNode(target) && ReactEditor.hasDOMNode(editor, target),\n    insertData: (editor, data)=>{\n        editor.insertData(data);\n    },\n    insertFragmentData: (editor, data)=>editor.insertFragmentData(data),\n    insertTextData: (editor, data)=>editor.insertTextData(data),\n    isComposing: (editor)=>{\n        return !!IS_COMPOSING.get(editor);\n    },\n    isFocused: (editor)=>!!IS_FOCUSED.get(editor),\n    isReadOnly: (editor)=>!!IS_READ_ONLY.get(editor),\n    isTargetInsideNonReadonlyVoid: (editor, target)=>{\n        if (IS_READ_ONLY.get(editor)) return false;\n        var slateNode = ReactEditor.hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(slateNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, slateNode);\n    },\n    setFragmentData: (editor, data, originEvent)=>editor.setFragmentData(data, originEvent),\n    toDOMNode: (editor, node)=>{\n        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        var domNode = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n        if (!domNode) {\n            throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(node)));\n        }\n        return domNode;\n    },\n    toDOMPoint: (editor, point)=>{\n        var [node] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.node(editor, point.path);\n        var el = ReactEditor.toDOMNode(editor, node);\n        var domPoint;\n        // If we're inside a void node, force the offset to 0, otherwise the zero\n        // width spacing character will result in an incorrect offset of 1\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n            at: point\n        })) {\n            point = {\n                path: point.path,\n                offset: 0\n            };\n        }\n        // For each leaf, we need to isolate its content, which means filtering\n        // to its direct text and zero-width spans. (We have to filter out any\n        // other siblings that may have been rendered alongside them.)\n        var selector = \"[data-slate-string], [data-slate-zero-width]\";\n        var texts = Array.from(el.querySelectorAll(selector));\n        var start = 0;\n        for(var i = 0; i < texts.length; i++){\n            var text = texts[i];\n            var domNode = text.childNodes[0];\n            if (domNode == null || domNode.textContent == null) {\n                continue;\n            }\n            var { length } = domNode.textContent;\n            var attr = text.getAttribute(\"data-slate-length\");\n            var trueLength = attr == null ? length : parseInt(attr, 10);\n            var end = start + trueLength;\n            // Prefer putting the selection inside the mark placeholder to ensure\n            // composed text is displayed with the correct marks.\n            var nextText = texts[i + 1];\n            if (point.offset === end && nextText !== null && nextText !== void 0 && nextText.hasAttribute(\"data-slate-mark-placeholder\")) {\n                var _nextText$textContent;\n                var domText = nextText.childNodes[0];\n                domPoint = [\n                    // COMPAT: If we don't explicity set the dom point to be on the actual\n                    // dom text element, chrome will put the selection behind the actual dom\n                    // text element, causing domRange.getBoundingClientRect() calls on a collapsed\n                    // selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)\n                    // which will cause issues when scrolling to it.\n                    domText instanceof DOMText ? domText : nextText,\n                    (_nextText$textContent = nextText.textContent) !== null && _nextText$textContent !== void 0 && _nextText$textContent.startsWith(\"\\uFEFF\") ? 1 : 0\n                ];\n                break;\n            }\n            if (point.offset <= end) {\n                var offset = Math.min(length, Math.max(0, point.offset - start));\n                domPoint = [\n                    domNode,\n                    offset\n                ];\n                break;\n            }\n            start = end;\n        }\n        if (!domPoint) {\n            throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(point)));\n        }\n        return domPoint;\n    },\n    toDOMRange: (editor, range)=>{\n        var { anchor, focus } = range;\n        var isBackward = slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(range);\n        var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n        var domFocus = slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n        var window1 = ReactEditor.getWindow(editor);\n        var domRange = window1.document.createRange();\n        var [startNode, startOffset] = isBackward ? domFocus : domAnchor;\n        var [endNode, endOffset] = isBackward ? domAnchor : domFocus;\n        // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n        // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n        // adjust the offset accordingly.\n        var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n        var isStartAtZeroWidth = !!startEl.getAttribute(\"data-slate-zero-width\");\n        var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n        var isEndAtZeroWidth = !!endEl.getAttribute(\"data-slate-zero-width\");\n        domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n        domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n        return domRange;\n    },\n    toSlateNode: (editor, domNode)=>{\n        var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n        if (domEl && !domEl.hasAttribute(\"data-slate-node\")) {\n            domEl = domEl.closest(\"[data-slate-node]\");\n        }\n        var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n        if (!node) {\n            throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n        }\n        return node;\n    },\n    toSlatePoint: (editor, domPoint, options)=>{\n        var { exactMatch, suppressThrow } = options;\n        var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);\n        var parentNode = nearestNode.parentNode;\n        var textNode = null;\n        var offset = 0;\n        if (parentNode) {\n            var _domNode$textContent, _domNode$textContent2;\n            var editorEl = ReactEditor.toDOMNode(editor, editor);\n            var potentialVoidNode = parentNode.closest('[data-slate-void=\"true\"]');\n            // Need to ensure that the closest void node is actually a void node\n            // within this editor, and not a void node within some parent editor. This can happen\n            // if this editor is within a void node of another editor (\"nested editors\", like in\n            // the \"Editable Voids\" example on the docs site).\n            var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;\n            var leafNode = parentNode.closest(\"[data-slate-leaf]\");\n            var domNode = null;\n            // Calculate how far into the text node the `nearestNode` is, so that we\n            // can determine what the offset relative to the text node is.\n            if (leafNode) {\n                textNode = leafNode.closest('[data-slate-node=\"text\"]');\n                if (textNode) {\n                    var window1 = ReactEditor.getWindow(editor);\n                    var range = window1.document.createRange();\n                    range.setStart(textNode, 0);\n                    range.setEnd(nearestNode, nearestOffset);\n                    var contents = range.cloneContents();\n                    var removals = [\n                        ...Array.prototype.slice.call(contents.querySelectorAll(\"[data-slate-zero-width]\")),\n                        ...Array.prototype.slice.call(contents.querySelectorAll(\"[contenteditable=false]\"))\n                    ];\n                    removals.forEach((el)=>{\n                        // COMPAT: While composing at the start of a text node, some keyboards put\n                        // the text content inside the zero width space.\n                        if (IS_ANDROID && !exactMatch && el.hasAttribute(\"data-slate-zero-width\") && el.textContent.length > 0 && el.textContext !== \"\\uFEFF\") {\n                            if (el.textContent.startsWith(\"\\uFEFF\")) {\n                                el.textContent = el.textContent.slice(1);\n                            }\n                            return;\n                        }\n                        el.parentNode.removeChild(el);\n                    });\n                    // COMPAT: Edge has a bug where Range.prototype.toString() will\n                    // convert \\n into \\r\\n. The bug causes a loop when slate-react\n                    // attempts to reposition its cursor to match the native position. Use\n                    // textContent.length instead.\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n                    offset = contents.textContent.length;\n                    domNode = textNode;\n                }\n            } else if (voidNode) {\n                // For void nodes, the element with the offset key will be a cousin, not an\n                // ancestor, so find it by going down from the nearest void parent and taking the\n                // first one that isn't inside a nested editor.\n                var leafNodes = voidNode.querySelectorAll(\"[data-slate-leaf]\");\n                for(var index = 0; index < leafNodes.length; index++){\n                    var current = leafNodes[index];\n                    if (ReactEditor.hasDOMNode(editor, current)) {\n                        leafNode = current;\n                        break;\n                    }\n                }\n                // COMPAT: In read-only editors the leaf is not rendered.\n                if (!leafNode) {\n                    offset = 1;\n                } else {\n                    textNode = leafNode.closest('[data-slate-node=\"text\"]');\n                    domNode = leafNode;\n                    offset = domNode.textContent.length;\n                    domNode.querySelectorAll(\"[data-slate-zero-width]\").forEach((el)=>{\n                        offset -= el.textContent.length;\n                    });\n                }\n            }\n            if (domNode && offset === domNode.textContent.length && // COMPAT: Android IMEs might remove the zero width space while composing,\n            // and we don't add it for line-breaks.\n            IS_ANDROID && domNode.getAttribute(\"data-slate-zero-width\") === \"z\" && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.startsWith(\"\\uFEFF\") && // COMPAT: If the parent node is a Slate zero-width space, editor is\n            // because the text node should have no characters. However, during IME\n            // composition the ASCII characters will be prepended to the zero-width\n            // space, so subtract 1 from the offset to account for the zero-width\n            // space character.\n            (parentNode.hasAttribute(\"data-slate-zero-width\") || // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\\n'\n            // when the document ends with a new-line character. This results in the offset\n            // length being off by one, so we need to subtract one to account for this.\n            IS_FIREFOX && (_domNode$textContent2 = domNode.textContent) !== null && _domNode$textContent2 !== void 0 && _domNode$textContent2.endsWith(\"\\n\\n\"))) {\n                offset--;\n            }\n        }\n        if (IS_ANDROID && !textNode && !exactMatch) {\n            var node = parentNode.hasAttribute(\"data-slate-node\") ? parentNode : parentNode.closest(\"[data-slate-node]\");\n            if (node && ReactEditor.hasDOMNode(editor, node, {\n                editable: true\n            })) {\n                var _slateNode = ReactEditor.toSlateNode(editor, node);\n                var { path: _path, offset: _offset } = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, ReactEditor.findPath(editor, _slateNode));\n                if (!node.querySelector(\"[data-slate-leaf]\")) {\n                    _offset = nearestOffset;\n                }\n                return {\n                    path: _path,\n                    offset: _offset\n                };\n            }\n        }\n        if (!textNode) {\n            if (suppressThrow) {\n                return null;\n            }\n            throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n        }\n        // COMPAT: If someone is clicking from one Slate editor into another,\n        // the select event fires twice, once for the old editor's `element`\n        // first, and then afterwards for the correct `element`. (2017/03/03)\n        var slateNode = ReactEditor.toSlateNode(editor, textNode);\n        var path = ReactEditor.findPath(editor, slateNode);\n        return {\n            path,\n            offset\n        };\n    },\n    toSlateRange: (editor, domRange, options)=>{\n        var _focusNode$textConten;\n        var { exactMatch, suppressThrow } = options;\n        var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;\n        var anchorNode;\n        var anchorOffset;\n        var focusNode;\n        var focusOffset;\n        var isCollapsed;\n        if (el) {\n            if (isDOMSelection(domRange)) {\n                // COMPAT: In firefox the normal seletion way does not work\n                // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n                if (IS_FIREFOX && domRange.rangeCount > 1) {\n                    focusNode = domRange.focusNode; // Focus node works fine\n                    var firstRange = domRange.getRangeAt(0);\n                    var lastRange = domRange.getRangeAt(domRange.rangeCount - 1);\n                    // Here we are in the contenteditable mode of a table in firefox\n                    if (focusNode instanceof HTMLTableRowElement && firstRange.startContainer instanceof HTMLTableRowElement && lastRange.startContainer instanceof HTMLTableRowElement) {\n                        // HTMLElement, becouse Element is a slate element\n                        function getLastChildren(element) {\n                            if (element.childElementCount > 0) {\n                                return getLastChildren(element.children[0]);\n                            } else {\n                                return element;\n                            }\n                        }\n                        var firstNodeRow = firstRange.startContainer;\n                        var lastNodeRow = lastRange.startContainer;\n                        // This should never fail as \"The HTMLElement interface represents any HTML element.\"\n                        var firstNode = getLastChildren(firstNodeRow.children[firstRange.startOffset]);\n                        var lastNode = getLastChildren(lastNodeRow.children[lastRange.startOffset]);\n                        // Zero, as we allways take the right one as the anchor point\n                        focusOffset = 0;\n                        if (lastNode.childNodes.length > 0) {\n                            anchorNode = lastNode.childNodes[0];\n                        } else {\n                            anchorNode = lastNode;\n                        }\n                        if (firstNode.childNodes.length > 0) {\n                            focusNode = firstNode.childNodes[0];\n                        } else {\n                            focusNode = firstNode;\n                        }\n                        if (lastNode instanceof HTMLElement) {\n                            anchorOffset = lastNode.innerHTML.length;\n                        } else {\n                            // Fallback option\n                            anchorOffset = 0;\n                        }\n                    } else {\n                        // This is the read only mode of a firefox table\n                        // Right to left\n                        if (firstRange.startContainer === focusNode) {\n                            anchorNode = lastRange.endContainer;\n                            anchorOffset = lastRange.endOffset;\n                            focusOffset = firstRange.startOffset;\n                        } else {\n                            // Left to right\n                            anchorNode = firstRange.startContainer;\n                            anchorOffset = firstRange.endOffset;\n                            focusOffset = lastRange.startOffset;\n                        }\n                    }\n                } else {\n                    anchorNode = domRange.anchorNode;\n                    anchorOffset = domRange.anchorOffset;\n                    focusNode = domRange.focusNode;\n                    focusOffset = domRange.focusOffset;\n                }\n                // COMPAT: There's a bug in chrome that always returns `true` for\n                // `isCollapsed` for a Selection that comes from a ShadowRoot.\n                // (2020/08/08)\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n                // IsCollapsed might not work in firefox, but this will\n                if (IS_CHROME && hasShadowRoot(anchorNode) || IS_FIREFOX) {\n                    isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;\n                } else {\n                    isCollapsed = domRange.isCollapsed;\n                }\n            } else {\n                anchorNode = domRange.startContainer;\n                anchorOffset = domRange.startOffset;\n                focusNode = domRange.endContainer;\n                focusOffset = domRange.endOffset;\n                isCollapsed = domRange.collapsed;\n            }\n        }\n        if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n            throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n        }\n        // COMPAT: Firefox sometimes includes an extra \\n (rendered by TextString\n        // when isTrailing is true) in the focusOffset, resulting in an invalid\n        // Slate point. (2023/11/01)\n        if (IS_FIREFOX && (_focusNode$textConten = focusNode.textContent) !== null && _focusNode$textConten !== void 0 && _focusNode$textConten.endsWith(\"\\n\\n\") && focusOffset === focusNode.textContent.length) {\n            focusOffset--;\n        }\n        // COMPAT: Triple-clicking a word in chrome will sometimes place the focus\n        // inside a `contenteditable=\"false\"` DOM node following the word, which\n        // will cause `toSlatePoint` to throw an error. (2023/03/07)\n        if (\"getAttribute\" in focusNode && focusNode.getAttribute(\"contenteditable\") === \"false\" && focusNode.getAttribute(\"data-slate-void\") !== \"true\") {\n            var _anchorNode$textConte;\n            focusNode = anchorNode;\n            focusOffset = ((_anchorNode$textConte = anchorNode.textContent) === null || _anchorNode$textConte === void 0 ? void 0 : _anchorNode$textConte.length) || 0;\n        }\n        var anchor = ReactEditor.toSlatePoint(editor, [\n            anchorNode,\n            anchorOffset\n        ], {\n            exactMatch,\n            suppressThrow\n        });\n        if (!anchor) {\n            return null;\n        }\n        var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [\n            focusNode,\n            focusOffset\n        ], {\n            exactMatch,\n            suppressThrow\n        });\n        if (!focus) {\n            return null;\n        }\n        var range = {\n            anchor: anchor,\n            focus: focus\n        };\n        // if the selection is a hanging range that ends in a void\n        // and the DOM focus is an Element\n        // (meaning that the selection ends before the element)\n        // unhang the range to avoid mistakenly including the void\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(range) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isForward(range) && isDOMElement(focusNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n            at: range.focus,\n            mode: \"highest\"\n        })) {\n            range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.unhangRange(editor, range, {\n                voids: true\n            });\n        }\n        return range;\n    }\n};\n/**\n * Check whether a text diff was applied in a way we can perform the pending action on /\n * recover the pending selection.\n */ function verifyDiffState(editor, textDiff) {\n    var { path, diff } = textDiff;\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path)) {\n        return false;\n    }\n    var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path);\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(node)) {\n        return false;\n    }\n    if (diff.start !== node.text.length || diff.text.length === 0) {\n        return node.text.slice(diff.start, diff.start + diff.text.length) === diff.text;\n    }\n    var nextPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.next(path);\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, nextPath)) {\n        return false;\n    }\n    var nextNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, nextPath);\n    return slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(nextNode) && nextNode.text.startsWith(diff.text);\n}\nfunction applyStringDiff(text) {\n    for(var _len = arguments.length, diffs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        diffs[_key - 1] = arguments[_key];\n    }\n    return diffs.reduce((text, diff)=>text.slice(0, diff.start) + diff.text + text.slice(diff.end), text);\n}\nfunction longestCommonPrefixLength(str, another) {\n    var length = Math.min(str.length, another.length);\n    for(var i = 0; i < length; i++){\n        if (str.charAt(i) !== another.charAt(i)) {\n            return i;\n        }\n    }\n    return length;\n}\nfunction longestCommonSuffixLength(str, another, max) {\n    var length = Math.min(str.length, another.length, max);\n    for(var i = 0; i < length; i++){\n        if (str.charAt(str.length - i - 1) !== another.charAt(another.length - i - 1)) {\n            return i;\n        }\n    }\n    return length;\n}\n/**\n * Remove redundant changes from the diff so that it spans the minimal possible range\n */ function normalizeStringDiff(targetText, diff) {\n    var { start, end, text } = diff;\n    var removedText = targetText.slice(start, end);\n    var prefixLength = longestCommonPrefixLength(removedText, text);\n    var max = Math.min(removedText.length - prefixLength, text.length - prefixLength);\n    var suffixLength = longestCommonSuffixLength(removedText, text, max);\n    var normalized = {\n        start: start + prefixLength,\n        end: end - suffixLength,\n        text: text.slice(prefixLength, text.length - suffixLength)\n    };\n    if (normalized.start === normalized.end && normalized.text.length === 0) {\n        return null;\n    }\n    return normalized;\n}\n/**\n * Return a string diff that is equivalent to applying b after a spanning the range of\n * both changes\n */ function mergeStringDiffs(targetText, a, b) {\n    var start = Math.min(a.start, b.start);\n    var overlap = Math.max(0, Math.min(a.start + a.text.length, b.end) - b.start);\n    var applied = applyStringDiff(targetText, a, b);\n    var sliceEnd = Math.max(b.start + b.text.length, a.start + a.text.length + (a.start + a.text.length > b.start ? b.text.length : 0) - overlap);\n    var text = applied.slice(start, sliceEnd);\n    var end = Math.max(a.end, b.end - a.text.length + (a.end - a.start));\n    return normalizeStringDiff(targetText, {\n        start,\n        end,\n        text\n    });\n}\n/**\n * Get the slate range the text diff spans.\n */ function targetRange(textDiff) {\n    var { path, diff } = textDiff;\n    return {\n        anchor: {\n            path,\n            offset: diff.start\n        },\n        focus: {\n            path,\n            offset: diff.end\n        }\n    };\n}\n/**\n * Normalize a 'pending point' a.k.a a point based on the dom state before applying\n * the pending diffs. Since the pending diffs might have been inserted with different\n * marks we have to 'walk' the offset from the starting position to ensure we still\n * have a valid point inside the document\n */ function normalizePoint(editor, point) {\n    var { path, offset } = point;\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path)) {\n        return null;\n    }\n    var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path);\n    if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText(leaf)) {\n        return null;\n    }\n    var parentBlock = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n        match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n        at: path\n    });\n    if (!parentBlock) {\n        return null;\n    }\n    while(offset > leaf.text.length){\n        var entry = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n            at: path,\n            match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n        });\n        if (!entry || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.isDescendant(entry[1], parentBlock[1])) {\n            return null;\n        }\n        offset -= leaf.text.length;\n        leaf = entry[0];\n        path = entry[1];\n    }\n    return {\n        path,\n        offset\n    };\n}\n/**\n * Normalize a 'pending selection' to ensure it's valid in the current document state.\n */ function normalizeRange(editor, range) {\n    var anchor = normalizePoint(editor, range.anchor);\n    if (!anchor) {\n        return null;\n    }\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(range)) {\n        return {\n            anchor,\n            focus: anchor\n        };\n    }\n    var focus = normalizePoint(editor, range.focus);\n    if (!focus) {\n        return null;\n    }\n    return {\n        anchor,\n        focus\n    };\n}\nfunction transformPendingPoint(editor, point, op) {\n    var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);\n    var textDiff = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((_ref)=>{\n        var { path } = _ref;\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(path, point.path);\n    });\n    if (!textDiff || point.offset <= textDiff.diff.start) {\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Point.transform(point, op, {\n            affinity: \"backward\"\n        });\n    }\n    var { diff } = textDiff;\n    // Point references location inside the diff => transform the point based on the location\n    // the diff will be applied to and add the offset inside the diff.\n    if (point.offset <= diff.start + diff.text.length) {\n        var _anchor = {\n            path: point.path,\n            offset: diff.start\n        };\n        var _transformed = slate__WEBPACK_IMPORTED_MODULE_7__.Point.transform(_anchor, op, {\n            affinity: \"backward\"\n        });\n        if (!_transformed) {\n            return null;\n        }\n        return {\n            path: _transformed.path,\n            offset: _transformed.offset + point.offset - diff.start\n        };\n    }\n    // Point references location after the diff\n    var anchor = {\n        path: point.path,\n        offset: point.offset - diff.text.length + diff.end - diff.start\n    };\n    var transformed = slate__WEBPACK_IMPORTED_MODULE_7__.Point.transform(anchor, op, {\n        affinity: \"backward\"\n    });\n    if (!transformed) {\n        return null;\n    }\n    if (op.type === \"split_node\" && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(op.path, point.path) && anchor.offset < op.position && diff.start < op.position) {\n        return transformed;\n    }\n    return {\n        path: transformed.path,\n        offset: transformed.offset + diff.text.length - diff.end + diff.start\n    };\n}\nfunction transformPendingRange(editor, range, op) {\n    var anchor = transformPendingPoint(editor, range.anchor, op);\n    if (!anchor) {\n        return null;\n    }\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(range)) {\n        return {\n            anchor,\n            focus: anchor\n        };\n    }\n    var focus = transformPendingPoint(editor, range.focus, op);\n    if (!focus) {\n        return null;\n    }\n    return {\n        anchor,\n        focus\n    };\n}\nfunction transformTextDiff(textDiff, op) {\n    var { path, diff, id } = textDiff;\n    switch(op.type){\n        case \"insert_text\":\n            {\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(op.path, path) || op.offset >= diff.end) {\n                    return textDiff;\n                }\n                if (op.offset <= diff.start) {\n                    return {\n                        diff: {\n                            start: op.text.length + diff.start,\n                            end: op.text.length + diff.end,\n                            text: diff.text\n                        },\n                        id,\n                        path\n                    };\n                }\n                return {\n                    diff: {\n                        start: diff.start,\n                        end: diff.end + op.text.length,\n                        text: diff.text\n                    },\n                    id,\n                    path\n                };\n            }\n        case \"remove_text\":\n            {\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(op.path, path) || op.offset >= diff.end) {\n                    return textDiff;\n                }\n                if (op.offset + op.text.length <= diff.start) {\n                    return {\n                        diff: {\n                            start: diff.start - op.text.length,\n                            end: diff.end - op.text.length,\n                            text: diff.text\n                        },\n                        id,\n                        path\n                    };\n                }\n                return {\n                    diff: {\n                        start: diff.start,\n                        end: diff.end - op.text.length,\n                        text: diff.text\n                    },\n                    id,\n                    path\n                };\n            }\n        case \"split_node\":\n            {\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(op.path, path) || op.position >= diff.end) {\n                    return {\n                        diff,\n                        id,\n                        path: slate__WEBPACK_IMPORTED_MODULE_7__.Path.transform(path, op, {\n                            affinity: \"backward\"\n                        })\n                    };\n                }\n                if (op.position > diff.start) {\n                    return {\n                        diff: {\n                            start: diff.start,\n                            end: Math.min(op.position, diff.end),\n                            text: diff.text\n                        },\n                        id,\n                        path\n                    };\n                }\n                return {\n                    diff: {\n                        start: diff.start - op.position,\n                        end: diff.end - op.position,\n                        text: diff.text\n                    },\n                    id,\n                    path: slate__WEBPACK_IMPORTED_MODULE_7__.Path.transform(path, op, {\n                        affinity: \"forward\"\n                    })\n                };\n            }\n        case \"merge_node\":\n            {\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(op.path, path)) {\n                    return {\n                        diff,\n                        id,\n                        path: slate__WEBPACK_IMPORTED_MODULE_7__.Path.transform(path, op)\n                    };\n                }\n                return {\n                    diff: {\n                        start: diff.start + op.position,\n                        end: diff.end + op.position,\n                        text: diff.text\n                    },\n                    id,\n                    path: slate__WEBPACK_IMPORTED_MODULE_7__.Path.transform(path, op)\n                };\n            }\n    }\n    var newPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.transform(path, op);\n    if (!newPath) {\n        return null;\n    }\n    return {\n        diff,\n        path: newPath,\n        id\n    };\n}\nfunction ownKeys$6(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$6(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$6(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n// https://github.com/facebook/draft-js/blob/main/src/component/handlers/composition/DraftEditorCompositionHandler.js#L41\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\nvar RESOLVE_DELAY = 25;\n// Time with no user interaction before the current user action is considered as done.\nvar FLUSH_DELAY = 200;\n// Replace with `const debug = console.log` to debug\nvar debug = function debug() {};\n// Type guard to check if a value is a DataTransfer\nvar isDataTransfer = (value)=>(value === null || value === void 0 ? void 0 : value.constructor.name) === \"DataTransfer\";\nfunction createAndroidInputManager(_ref) {\n    var { editor, scheduleOnDOMSelectionChange, onDOMSelectionChange } = _ref;\n    var flushing = false;\n    var compositionEndTimeoutId = null;\n    var flushTimeoutId = null;\n    var actionTimeoutId = null;\n    var idCounter = 0;\n    var insertPositionHint = false;\n    var applyPendingSelection = ()=>{\n        var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);\n        EDITOR_TO_PENDING_SELECTION.delete(editor);\n        if (pendingSelection) {\n            var { selection } = editor;\n            var normalized = normalizeRange(editor, pendingSelection);\n            if (normalized && (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(normalized, selection))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, normalized);\n            }\n        }\n    };\n    var performAction = ()=>{\n        var action = EDITOR_TO_PENDING_ACTION.get(editor);\n        EDITOR_TO_PENDING_ACTION.delete(editor);\n        if (!action) {\n            return;\n        }\n        if (action.at) {\n            var target = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);\n            if (!target) {\n                return;\n            }\n            var _targetRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, target);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, _targetRange)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, target);\n            }\n        }\n        action.run();\n    };\n    var flush = ()=>{\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        if (actionTimeoutId) {\n            clearTimeout(actionTimeoutId);\n            actionTimeoutId = null;\n        }\n        if (!hasPendingDiffs() && !hasPendingAction()) {\n            applyPendingSelection();\n            return;\n        }\n        if (!flushing) {\n            flushing = true;\n            setTimeout(()=>flushing = false);\n        }\n        if (hasPendingAction()) {\n            flushing = \"action\";\n        }\n        var selectionRef = editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection, {\n            affinity: \"forward\"\n        });\n        EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n        debug(\"flush\", EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));\n        var scheduleSelectionChange = hasPendingDiffs();\n        var diff;\n        while(diff = (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI === void 0 ? void 0 : _EDITOR_TO_PENDING_DI[0]){\n            var _EDITOR_TO_PENDING_DI, _EDITOR_TO_PENDING_DI2;\n            var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n            if (pendingMarks !== undefined) {\n                EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                editor.marks = pendingMarks;\n            }\n            if (pendingMarks && insertPositionHint === false) {\n                insertPositionHint = null;\n            }\n            var range = targetRange(diff);\n            if (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, range)) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n            }\n            if (diff.diff.text) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, diff.diff.text);\n            } else {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n            }\n            // Remove diff only after we have applied it to account for it when transforming\n            // pending ranges.\n            EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2.filter((_ref2)=>{\n                var { id } = _ref2;\n                return id !== diff.id;\n            }));\n            if (!verifyDiffState(editor, diff)) {\n                scheduleSelectionChange = false;\n                EDITOR_TO_PENDING_ACTION.delete(editor);\n                EDITOR_TO_USER_MARKS.delete(editor);\n                flushing = \"action\";\n                // Ensure we don't restore the pending user (dom) selection\n                // since the document and dom state do not match.\n                EDITOR_TO_PENDING_SELECTION.delete(editor);\n                scheduleOnDOMSelectionChange.cancel();\n                onDOMSelectionChange.cancel();\n                selectionRef === null || selectionRef === void 0 || selectionRef.unref();\n            }\n        }\n        var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n        if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, editor.selection))) {\n            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, selection);\n        }\n        if (hasPendingAction()) {\n            performAction();\n            return;\n        }\n        // COMPAT: The selectionChange event is fired after the action is performed,\n        // so we have to manually schedule it to ensure we don't 'throw away' the selection\n        // while rendering if we have pending changes.\n        if (scheduleSelectionChange) {\n            scheduleOnDOMSelectionChange();\n        }\n        scheduleOnDOMSelectionChange.flush();\n        onDOMSelectionChange.flush();\n        applyPendingSelection();\n        var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n        EDITOR_TO_USER_MARKS.delete(editor);\n        if (userMarks !== undefined) {\n            editor.marks = userMarks;\n            editor.onChange();\n        }\n    };\n    var handleCompositionEnd = (_event)=>{\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n        }\n        compositionEndTimeoutId = setTimeout(()=>{\n            IS_COMPOSING.set(editor, false);\n            flush();\n        }, RESOLVE_DELAY);\n    };\n    var handleCompositionStart = (_event)=>{\n        IS_COMPOSING.set(editor, true);\n        if (compositionEndTimeoutId) {\n            clearTimeout(compositionEndTimeoutId);\n            compositionEndTimeoutId = null;\n        }\n    };\n    var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n        var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n        if (!placeholderElement) {\n            return;\n        }\n        if (hasPendingDiffs() || forceHide) {\n            placeholderElement.style.display = \"none\";\n            return;\n        }\n        placeholderElement.style.removeProperty(\"display\");\n    };\n    var storeDiff = (path, diff)=>{\n        var _EDITOR_TO_PENDING_DI3;\n        var pendingDiffs = (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI3 !== void 0 ? _EDITOR_TO_PENDING_DI3 : [];\n        EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n        var target = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, path);\n        var idx = pendingDiffs.findIndex((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n        if (idx < 0) {\n            var normalized = normalizeStringDiff(target.text, diff);\n            if (normalized) {\n                pendingDiffs.push({\n                    path,\n                    diff,\n                    id: idCounter++\n                });\n            }\n            updatePlaceholderVisibility();\n            return;\n        }\n        var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);\n        if (!merged) {\n            pendingDiffs.splice(idx, 1);\n            updatePlaceholderVisibility();\n            return;\n        }\n        pendingDiffs[idx] = _objectSpread$6(_objectSpread$6({}, pendingDiffs[idx]), {}, {\n            diff: merged\n        });\n    };\n    var scheduleAction = function scheduleAction(run) {\n        var { at } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        insertPositionHint = false;\n        EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        if (hasPendingAction()) {\n            flush();\n        }\n        EDITOR_TO_PENDING_ACTION.set(editor, {\n            at,\n            run\n        });\n        // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n        // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n        // in this case and thus never actually perform the action.\n        actionTimeoutId = setTimeout(flush);\n    };\n    var handleDOMBeforeInput = (event)=>{\n        var _targetRange2;\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        var { inputType: type } = event;\n        var targetRange = null;\n        var data = event.dataTransfer || event.data || undefined;\n        if (insertPositionHint !== false && type !== \"insertText\" && type !== \"insertCompositionText\") {\n            insertPositionHint = false;\n        }\n        var [nativeTargetRange] = event.getTargetRanges();\n        if (nativeTargetRange) {\n            targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        // COMPAT: SelectionChange event is fired after the action is performed, so we\n        // have to manually get the selection here to ensure it's up-to-date.\n        var window1 = ReactEditor.getWindow(editor);\n        var domSelection = window1.getSelection();\n        if (!targetRange && domSelection) {\n            nativeTargetRange = domSelection;\n            targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n                exactMatch: false,\n                suppressThrow: true\n            });\n        }\n        targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n        if (!targetRange) {\n            return;\n        }\n        // By default, the input manager tries to store text diffs so that we can\n        // defer flushing them at a later point in time. We don't want to flush\n        // for every input event as this can be expensive. However, there are some\n        // scenarios where we cannot safely store the text diff and must instead\n        // schedule an action to let Slate normalize the editor state.\n        var canStoreDiff = true;\n        if (type.startsWith(\"delete\")) {\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                var [_start, _end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                var _leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _start.path);\n                if (_leaf.text.length === _start.offset && _end.offset === 0) {\n                    var next = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.next(editor, {\n                        at: _start.path,\n                        match: slate__WEBPACK_IMPORTED_MODULE_7__.Text.isText\n                    });\n                    if (next && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(next[1], _end.path)) {\n                        targetRange = {\n                            anchor: _end,\n                            focus: _end\n                        };\n                    }\n                }\n            }\n            var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n            var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n            var [leaf, path] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.leaf(editor, start.path);\n            var diff = {\n                text: \"\",\n                start: start.offset,\n                end: end.offset\n            };\n            var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);\n            var relevantPendingDiffs = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find((change)=>slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(change.path, path));\n            var diffs = relevantPendingDiffs ? [\n                relevantPendingDiffs.diff,\n                diff\n            ] : [\n                diff\n            ];\n            var text = applyStringDiff(leaf.text, ...diffs);\n            if (text.length === 0) {\n                // Text leaf will be removed, so we need to schedule an\n                // action to remove it so that Slate can normalize instead\n                // of storing as a diff\n                canStoreDiff = false;\n            }\n            if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(targetRange)) {\n                if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                    var point = {\n                        path: targetRange.anchor.path,\n                        offset: start.offset\n                    };\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, point, point);\n                    handleUserSelect(range);\n                    return storeDiff(targetRange.anchor.path, {\n                        text: \"\",\n                        end: end.offset,\n                        start: start.offset\n                    });\n                }\n                return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                        direction\n                    }), {\n                    at: targetRange\n                });\n            }\n        }\n        switch(type){\n            case \"deleteByComposition\":\n            case \"deleteByCut\":\n            case \"deleteByDrag\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContent\":\n            case \"deleteContentForward\":\n                {\n                    var { anchor } = targetRange;\n                    if (canStoreDiff && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange)) {\n                        var targetNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n                        if (anchor.offset < targetNode.text.length) {\n                            return storeDiff(anchor.path, {\n                                text: \"\",\n                                start: anchor.offset,\n                                end: anchor.offset + 1\n                            });\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteContentBackward\":\n                {\n                    var _nativeTargetRange;\n                    var { anchor: _anchor } = targetRange;\n                    // If we have a mismatch between the native and slate selection being collapsed\n                    // we are most likely deleting a zero-width placeholder and thus should perform it\n                    // as an action to ensure correct behavior (mostly happens with mark placeholders)\n                    var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n                    if (canStoreDiff && nativeCollapsed && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n                        return storeDiff(_anchor.path, {\n                            text: \"\",\n                            start: _anchor.offset - 1,\n                            end: _anchor.offset\n                        });\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteEntireSoftLine\":\n                {\n                    return scheduleAction(()=>{\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                    }, {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteHardLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteSoftLineForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordBackward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"deleteWordForward\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        }), {\n                        at: targetRange\n                    });\n                }\n            case \"insertLineBreak\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertParagraph\":\n                {\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor), {\n                        at: targetRange\n                    });\n                }\n            case \"insertCompositionText\":\n            case \"deleteCompositionText\":\n            case \"insertFromComposition\":\n            case \"insertFromDrop\":\n            case \"insertFromPaste\":\n            case \"insertFromYank\":\n            case \"insertReplacementText\":\n            case \"insertText\":\n                {\n                    if (isDataTransfer(data)) {\n                        return scheduleAction(()=>ReactEditor.insertData(editor, data), {\n                            at: targetRange\n                        });\n                    }\n                    var _text = data !== null && data !== void 0 ? data : \"\";\n                    // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n                    // the placeholder itself and thus includes the zero-width space inside edit events.\n                    if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n                        _text = _text.replace(\"\\uFEFF\", \"\");\n                    }\n                    // Pastes from the Android clipboard will generate `insertText` events.\n                    // If the copied text contains any newlines, Android will append an\n                    // extra newline to the end of the copied text.\n                    if (type === \"insertText\" && /.*\\n.*\\n$/.test(_text)) {\n                        _text = _text.slice(0, -1);\n                    }\n                    // If the text includes a newline, split it at newlines and paste each component\n                    // string, with soft breaks in between each.\n                    if (_text.includes(\"\\n\")) {\n                        return scheduleAction(()=>{\n                            var parts = _text.split(\"\\n\");\n                            parts.forEach((line, i)=>{\n                                if (line) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, line);\n                                }\n                                if (i !== parts.length - 1) {\n                                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                                }\n                            });\n                        }, {\n                            at: targetRange\n                        });\n                    }\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n                        var [_start2, _end2] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(targetRange);\n                        var _diff = {\n                            start: _start2.offset,\n                            end: _end2.offset,\n                            text: _text\n                        };\n                        // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n                        // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n                        // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n                        // text events are fired with the correct target ranges, only the final 'insertComposition'\n                        // isn't, so we can adjust the target range start offset if we are confident this is the\n                        // swiftkey insert causing the issue.\n                        if (_text && insertPositionHint && type === \"insertCompositionText\") {\n                            var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n                            var diffPosition = _diff.start + _diff.text.search(/\\S|$/);\n                            if (diffPosition === hintPosition + 1 && _diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                                _diff.start -= 1;\n                                insertPositionHint = null;\n                                scheduleFlush();\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else if (type === \"insertText\") {\n                            if (insertPositionHint === null) {\n                                insertPositionHint = _diff;\n                            } else if (insertPositionHint && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                                insertPositionHint = _objectSpread$6(_objectSpread$6({}, insertPositionHint), {}, {\n                                    text: insertPositionHint.text + _text\n                                });\n                            } else {\n                                insertPositionHint = false;\n                            }\n                        } else {\n                            insertPositionHint = false;\n                        }\n                        if (canStoreDiff) {\n                            storeDiff(_start2.path, _diff);\n                            return;\n                        }\n                    }\n                    return scheduleAction(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text), {\n                        at: targetRange\n                    });\n                }\n        }\n    };\n    var hasPendingAction = ()=>{\n        return !!EDITOR_TO_PENDING_ACTION.get(editor);\n    };\n    var hasPendingDiffs = ()=>{\n        var _EDITOR_TO_PENDING_DI4;\n        return !!((_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 && _EDITOR_TO_PENDING_DI4.length);\n    };\n    var hasPendingChanges = ()=>{\n        return hasPendingAction() || hasPendingDiffs();\n    };\n    var isFlushing = ()=>{\n        return flushing;\n    };\n    var handleUserSelect = (range)=>{\n        EDITOR_TO_PENDING_SELECTION.set(editor, range);\n        if (flushTimeoutId) {\n            clearTimeout(flushTimeoutId);\n            flushTimeoutId = null;\n        }\n        var { selection } = editor;\n        if (!range) {\n            return;\n        }\n        var pathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path, range.anchor.path);\n        var parentPathChanged = !selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n        if (pathChanged && insertPositionHint || parentPathChanged) {\n            insertPositionHint = false;\n        }\n        if (pathChanged || hasPendingDiffs()) {\n            flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n        }\n    };\n    var handleInput = ()=>{\n        if (hasPendingAction() || !hasPendingDiffs()) {\n            flush();\n        }\n    };\n    var handleKeyDown = (_)=>{\n        // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n        // directly next to a non-contenteditable element (= the placeholder).\n        // The only event fired soon enough for us to allow hiding the placeholder\n        // without swiftkey picking it up is the keydown event, so we have to hide it\n        // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n        if (!hasPendingDiffs()) {\n            updatePlaceholderVisibility(true);\n            setTimeout(updatePlaceholderVisibility);\n        }\n    };\n    var scheduleFlush = ()=>{\n        if (!hasPendingAction()) {\n            actionTimeoutId = setTimeout(flush);\n        }\n    };\n    var handleDomMutations = (mutations)=>{\n        if (hasPendingDiffs() || hasPendingAction()) {\n            return;\n        }\n        if (mutations.some((mutation)=>isTrackedMutation(editor, mutation, mutations))) {\n            var _EDITOR_TO_FORCE_REND;\n            // Cause a re-render to restore the dom state if we encounter tracked mutations without\n            // a corresponding pending action.\n            (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 || _EDITOR_TO_FORCE_REND();\n        }\n    };\n    return {\n        flush,\n        scheduleFlush,\n        hasPendingDiffs,\n        hasPendingAction,\n        hasPendingChanges,\n        isFlushing,\n        handleUserSelect,\n        handleCompositionEnd,\n        handleCompositionStart,\n        handleDOMBeforeInput,\n        handleKeyDown,\n        handleDomMutations,\n        handleInput\n    };\n}\nfunction useIsMounted() {\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        isMountedRef.current = true;\n        return ()=>{\n            isMountedRef.current = false;\n        };\n    }, []);\n    return isMountedRef.current;\n}\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */ var useIsomorphicLayoutEffect = CAN_USE_DOM ? react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_3__.useEffect;\nfunction useMutationObserver(node, callback, options) {\n    var [mutationObserver] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>new MutationObserver(callback));\n    useIsomorphicLayoutEffect(()=>{\n        // Discard mutations caused during render phase. This works due to react calling\n        // useLayoutEffect synchronously after the render phase before the next tick.\n        mutationObserver.takeRecords();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        mutationObserver.observe(node.current, options);\n        return ()=>mutationObserver.disconnect();\n    }, [\n        mutationObserver,\n        node,\n        options\n    ]);\n}\nvar _excluded$3 = [\n    \"node\"\n];\nfunction ownKeys$5(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$5(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$5(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar MUTATION_OBSERVER_CONFIG$1 = {\n    subtree: true,\n    childList: true,\n    characterData: true\n};\nvar useAndroidInputManager = !IS_ANDROID ? ()=>null : (_ref)=>{\n    var { node } = _ref, options = _objectWithoutProperties(_ref, _excluded$3);\n    if (!IS_ANDROID) {\n        return null;\n    }\n    var editor = useSlateStatic();\n    var isMounted = useIsMounted();\n    var [inputManager] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(()=>createAndroidInputManager(_objectSpread$5({\n            editor\n        }, options)));\n    useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG$1);\n    EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n    if (isMounted) {\n        inputManager.flush();\n    }\n    return inputManager;\n};\nvar _excluded$2 = [\n    \"anchor\",\n    \"focus\"\n], _excluded2$1 = [\n    \"anchor\",\n    \"focus\"\n];\nvar shallowCompare = (obj1, obj2)=>Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every((key)=>obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);\nvar isDecorationFlagsEqual = (range, other)=>{\n    var rangeOwnProps = _objectWithoutProperties(range, _excluded$2);\n    var otherOwnProps = _objectWithoutProperties(other, _excluded2$1);\n    return range[PLACEHOLDER_SYMBOL] === other[PLACEHOLDER_SYMBOL] && shallowCompare(rangeOwnProps, otherOwnProps);\n};\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */ var isElementDecorationsEqual = (list, another)=>{\n    if (list.length !== another.length) {\n        return false;\n    }\n    for(var i = 0; i < list.length; i++){\n        var range = list[i];\n        var other = another[i];\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(range, other) || !isDecorationFlagsEqual(range, other)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */ var isTextDecorationsEqual = (list, another)=>{\n    if (list.length !== another.length) {\n        return false;\n    }\n    for(var i = 0; i < list.length; i++){\n        var range = list[i];\n        var other = another[i];\n        // compare only offsets because paths doesn't matter for text\n        if (range.anchor.offset !== other.anchor.offset || range.focus.offset !== other.focus.offset || !isDecorationFlagsEqual(range, other)) {\n            return false;\n        }\n    }\n    return true;\n};\nfunction ownKeys$4(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$4(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$4(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * Leaf content strings.\n */ var String$1 = (props)=>{\n    var { isLast, leaf, parent, text } = props;\n    var editor = useSlateStatic();\n    var path = ReactEditor.findPath(editor, text);\n    var parentPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(path);\n    var isMarkPlaceholder = Boolean(leaf[MARK_PLACEHOLDER_SYMBOL]);\n    // COMPAT: Render text inside void nodes with a zero-width space.\n    // So the node can contain selection but the text is not visible.\n    if (editor.isVoid(parent)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            length: slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(parent).length\n        });\n    }\n    // COMPAT: If this is the last text node in an empty block, render a zero-\n    // width space that will convert into a line break when copying and pasting\n    // to support expected plain text.\n    if (leaf.text === \"\" && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.string(editor, parentPath) === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isLineBreak: true,\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: If the text is empty, it's because it's on the edge of an inline\n    // node, so we render a zero-width space so that the selection can be\n    // inserted next to it still.\n    if (leaf.text === \"\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ZeroWidthString, {\n            isMarkPlaceholder: isMarkPlaceholder\n        });\n    }\n    // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n    // so we need to add an extra trailing new lines to prevent that.\n    if (isLast && leaf.text.slice(-1) === \"\\n\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n            isTrailing: true,\n            text: leaf.text\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(TextString, {\n        text: leaf.text\n    });\n};\n/**\n * Leaf strings with text in them.\n */ var TextString = (props)=>{\n    var { text, isTrailing = false } = props;\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var getTextContent = ()=>{\n        return \"\".concat(text !== null && text !== void 0 ? text : \"\").concat(isTrailing ? \"\\n\" : \"\");\n    };\n    var [initialText] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(getTextContent);\n    // This is the actual text rendering boundary where we interface with the DOM\n    // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n    // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n    // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n    // exactly if and only if its current content does not match our current virtual DOM.\n    // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n    // eg makes native spellcheck opt out from checking the text node.\n    // useLayoutEffect: updating our span before browser paint\n    useIsomorphicLayoutEffect(()=>{\n        // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n        var textWithTrailing = getTextContent();\n        if (ref.current && ref.current.textContent !== textWithTrailing) {\n            ref.current.textContent = textWithTrailing;\n        }\n    // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n    });\n    // We intentionally render a memoized <span> that only receives the initial text content when the component is mounted.\n    // We defer to the layout effect above to update the `textContent` of the span element when needed.\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText$1, {\n        ref: ref\n    }, initialText);\n};\nvar MemoizedText$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)((props, ref)=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        \"data-slate-string\": true,\n        ref: ref\n    }, props.children);\n}));\n/**\n * Leaf strings without text, render as zero-width strings.\n */ var ZeroWidthString = (props)=>{\n    var { length = 0, isLineBreak = false, isMarkPlaceholder = false } = props;\n    var attributes = {\n        \"data-slate-zero-width\": isLineBreak ? \"n\" : \"z\",\n        \"data-slate-length\": length\n    };\n    if (isMarkPlaceholder) {\n        attributes[\"data-slate-mark-placeholder\"] = true;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$4({}, attributes), !IS_ANDROID || !isLineBreak ? \"\\uFEFF\" : null, isLineBreak ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null) : null);\n};\nfunction ownKeys$3(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$3(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$3(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction disconnectPlaceholderResizeObserver(placeholderResizeObserver, releaseObserver) {\n    if (placeholderResizeObserver.current) {\n        placeholderResizeObserver.current.disconnect();\n        if (releaseObserver) {\n            placeholderResizeObserver.current = null;\n        }\n    }\n}\nfunction clearTimeoutRef(timeoutRef) {\n    if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n    }\n}\n/**\n * Individual leaves in a text node with unique formatting.\n */ var Leaf = (props)=>{\n    var { leaf, isLast, text, parent, renderPlaceholder, renderLeaf = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultLeaf, _objectSpread$3({}, props)) } = props;\n    var editor = useSlateStatic();\n    var placeholderResizeObserver = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var [showPlaceholder, setShowPlaceholder] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var showPlaceholderTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var callbackPlaceholderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        disconnectPlaceholderResizeObserver(placeholderResizeObserver, placeholderEl == null);\n        if (placeholderEl == null) {\n            var _leaf$onPlaceholderRe;\n            EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n            (_leaf$onPlaceholderRe = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe === void 0 || _leaf$onPlaceholderRe.call(leaf, null);\n        } else {\n            EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n            if (!placeholderResizeObserver.current) {\n                // Create a new observer and observe the placeholder element.\n                var ResizeObserver$1 = window.ResizeObserver || _juggle_resize_observer__WEBPACK_IMPORTED_MODULE_4__.ResizeObserver;\n                placeholderResizeObserver.current = new ResizeObserver$1(()=>{\n                    var _leaf$onPlaceholderRe2;\n                    (_leaf$onPlaceholderRe2 = leaf.onPlaceholderResize) === null || _leaf$onPlaceholderRe2 === void 0 || _leaf$onPlaceholderRe2.call(leaf, placeholderEl);\n                });\n            }\n            placeholderResizeObserver.current.observe(placeholderEl);\n            placeholderRef.current = placeholderEl;\n        }\n    }, [\n        placeholderRef,\n        leaf,\n        editor\n    ]);\n    var children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(String$1, {\n        isLast: isLast,\n        leaf: leaf,\n        parent: parent,\n        text: text\n    });\n    var leafIsPlaceholder = Boolean(leaf[PLACEHOLDER_SYMBOL]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (leafIsPlaceholder) {\n            if (!showPlaceholderTimeoutRef.current) {\n                // Delay the placeholder, so it will not render in a selection\n                showPlaceholderTimeoutRef.current = setTimeout(()=>{\n                    setShowPlaceholder(true);\n                    showPlaceholderTimeoutRef.current = null;\n                }, 300);\n            }\n        } else {\n            clearTimeoutRef(showPlaceholderTimeoutRef);\n            setShowPlaceholder(false);\n        }\n        return ()=>clearTimeoutRef(showPlaceholderTimeoutRef);\n    }, [\n        leafIsPlaceholder,\n        setShowPlaceholder\n    ]);\n    if (leafIsPlaceholder && showPlaceholder) {\n        var placeholderProps = {\n            children: leaf.placeholder,\n            attributes: {\n                \"data-slate-placeholder\": true,\n                style: {\n                    position: \"absolute\",\n                    top: 0,\n                    pointerEvents: \"none\",\n                    width: \"100%\",\n                    maxWidth: \"100%\",\n                    display: \"block\",\n                    opacity: \"0.333\",\n                    userSelect: \"none\",\n                    textDecoration: \"none\",\n                    // Fixes https://github.com/udecode/plate/issues/2315\n                    WebkitUserModify: IS_WEBKIT ? \"inherit\" : undefined\n                },\n                contentEditable: false,\n                ref: callbackPlaceholderRef\n            }\n        };\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, renderPlaceholder(placeholderProps), children);\n    }\n    // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n    // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n    // contenteditable behaviors. (2019/05/08)\n    var attributes = {\n        \"data-slate-leaf\": true\n    };\n    return renderLeaf({\n        attributes,\n        children,\n        leaf,\n        text\n    });\n};\nvar MemoizedLeaf = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Leaf, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = (props)=>{\n    var { attributes, children } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$3({}, attributes), children);\n};\n/**\n * Text.\n */ var Text = (props)=>{\n    var { decorations, isLast, parent, renderPlaceholder, renderLeaf, text } = props;\n    var editor = useSlateStatic();\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var leaves = slate__WEBPACK_IMPORTED_MODULE_7__.Text.decorations(text, decorations);\n    var key = ReactEditor.findKey(editor, text);\n    var children = [];\n    for(var i = 0; i < leaves.length; i++){\n        var leaf = leaves[i];\n        children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedLeaf, {\n            isLast: isLast && i === leaves.length - 1,\n            key: \"\".concat(key.id, \"-\").concat(i),\n            renderPlaceholder: renderPlaceholder,\n            leaf: leaf,\n            text: text,\n            parent: parent,\n            renderLeaf: renderLeaf\n        }));\n    }\n    // Update element-related weak maps with the DOM element ref.\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((span)=>{\n        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (span) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, span);\n            NODE_TO_ELEMENT.set(text, span);\n            ELEMENT_TO_NODE.set(span, text);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            NODE_TO_ELEMENT.delete(text);\n            if (ref.current) {\n                ELEMENT_TO_NODE.delete(ref.current);\n            }\n        }\n        ref.current = span;\n    }, [\n        ref,\n        editor,\n        key,\n        text\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", {\n        \"data-slate-node\": \"text\",\n        ref: callbackRef\n    }, children);\n};\nvar MemoizedText = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Text, (prev, next)=>{\n    return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && isTextDecorationsEqual(next.decorations, prev.decorations);\n});\nfunction ownKeys$2(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$2(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * Element.\n */ var Element = (props)=>{\n    var { decorations, element, renderElement = (p)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultElement, _objectSpread$2({}, p)), renderPlaceholder, renderLeaf, selection } = props;\n    var editor = useSlateStatic();\n    var readOnly = useReadOnly();\n    var isInline = editor.isInline(element);\n    var key = ReactEditor.findKey(editor, element);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ref)=>{\n        // Update element-related weak maps with the DOM element ref.\n        var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n        if (ref) {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.set(key, ref);\n            NODE_TO_ELEMENT.set(element, ref);\n            ELEMENT_TO_NODE.set(ref, element);\n        } else {\n            KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 || KEY_TO_ELEMENT.delete(key);\n            NODE_TO_ELEMENT.delete(element);\n        }\n    }, [\n        editor,\n        key,\n        element\n    ]);\n    var children = useChildren({\n        decorations,\n        node: element,\n        renderElement,\n        renderPlaceholder,\n        renderLeaf,\n        selection\n    });\n    // Attributes that the developer must mix into the element in their\n    // custom node renderer component.\n    var attributes = {\n        \"data-slate-node\": \"element\",\n        ref\n    };\n    if (isInline) {\n        attributes[\"data-slate-inline\"] = true;\n    }\n    // If it's a block node with inline children, add the proper `dir` attribute\n    // for text direction.\n    if (!isInline && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, element)) {\n        var text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element);\n        var dir = direction__WEBPACK_IMPORTED_MODULE_0___default()(text);\n        if (dir === \"rtl\") {\n            attributes.dir = dir;\n        }\n    }\n    // If it's a void node, wrap the children in extra void-specific elements.\n    if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, element)) {\n        attributes[\"data-slate-void\"] = true;\n        if (!readOnly && isInline) {\n            attributes.contentEditable = false;\n        }\n        var Tag = isInline ? \"span\" : \"div\";\n        var [[_text]] = slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(element);\n        children = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, {\n            \"data-slate-spacer\": true,\n            style: {\n                height: \"0\",\n                color: \"transparent\",\n                outline: \"none\",\n                position: \"absolute\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n            renderPlaceholder: renderPlaceholder,\n            decorations: [],\n            isLast: false,\n            parent: element,\n            text: _text\n        }));\n        NODE_TO_INDEX.set(_text, 0);\n        NODE_TO_PARENT.set(_text, element);\n    }\n    return renderElement({\n        attributes,\n        children,\n        element\n    });\n};\nvar MemoizedElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(Element, (prev, next)=>{\n    return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && prev.renderPlaceholder === next.renderPlaceholder && isElementDecorationsEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(prev.selection, next.selection));\n});\n/**\n * The default element renderer.\n */ var DefaultElement = (props)=>{\n    var { attributes, children, element } = props;\n    var editor = useSlateStatic();\n    var Tag = editor.isInline(element) ? \"span\" : \"div\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Tag, _objectSpread$2(_objectSpread$2({}, attributes), {}, {\n        style: {\n            position: \"relative\"\n        }\n    }), children);\n};\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */ var DecorateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(()=>[]);\n/**\n * Get the current `decorate` prop of the editable.\n */ var useDecorate = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(DecorateContext);\n};\n/**\n * A React context for sharing the `selected` state of an element.\n */ var SelectedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `selected` state of an element.\n */ var useSelected = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectedContext);\n};\n/**\n * Children.\n */ var useChildren = (props)=>{\n    var { decorations, node, renderElement, renderPlaceholder, renderLeaf, selection } = props;\n    var decorate = useDecorate();\n    var editor = useSlateStatic();\n    var path = ReactEditor.findPath(editor, node);\n    var children = [];\n    var isLeafBlock = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isInline(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasInlines(editor, node);\n    for(var i = 0; i < node.children.length; i++){\n        var p = path.concat(i);\n        var n = node.children[i];\n        var key = ReactEditor.findKey(editor, n);\n        var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, p);\n        var sel = selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(range, selection);\n        var ds = decorate([\n            n,\n            p\n        ]);\n        for (var dec of decorations){\n            var d = slate__WEBPACK_IMPORTED_MODULE_7__.Range.intersection(dec, range);\n            if (d) {\n                ds.push(d);\n            }\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n)) {\n            children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SelectedContext.Provider, {\n                key: \"provider-\".concat(key.id),\n                value: !!sel\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedElement, {\n                decorations: ds,\n                element: n,\n                key: key.id,\n                renderElement: renderElement,\n                renderPlaceholder: renderPlaceholder,\n                renderLeaf: renderLeaf,\n                selection: sel\n            })));\n        } else {\n            children.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(MemoizedText, {\n                decorations: ds,\n                key: key.id,\n                isLast: isLeafBlock && i === node.children.length - 1,\n                parent: node,\n                renderPlaceholder: renderPlaceholder,\n                renderLeaf: renderLeaf,\n                text: n\n            }));\n        }\n        NODE_TO_INDEX.set(n, i);\n        NODE_TO_PARENT.set(n, node);\n    }\n    return children;\n};\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */ var ReadOnlyContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `readOnly` state of the editor.\n */ var useReadOnly = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ReadOnlyContext);\n};\nvar SlateContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Get the current editor object from the React context.\n */ var useSlate = ()=>{\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n    if (!context) {\n        throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n    }\n    var { editor } = context;\n    return editor;\n};\nvar useSlateWithV = ()=>{\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateContext);\n    if (!context) {\n        throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n    }\n    return context;\n};\nfunction useTrackUserInput() {\n    var editor = useSlateStatic();\n    var receivedUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n    var animationFrameIdRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(0);\n    var onUserInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(()=>{\n        if (receivedUserInput.current) {\n            return;\n        }\n        receivedUserInput.current = true;\n        var window1 = ReactEditor.getWindow(editor);\n        window1.cancelAnimationFrame(animationFrameIdRef.current);\n        animationFrameIdRef.current = window1.requestAnimationFrame(()=>{\n            receivedUserInput.current = false;\n        });\n    }, [\n        editor\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>()=>cancelAnimationFrame(animationFrameIdRef.current), []);\n    return {\n        receivedUserInput,\n        onUserInput\n    };\n}\nvar TRIPLE_CLICK = 3;\n/**\n * Hotkey mappings for each platform.\n */ var HOTKEYS = {\n    bold: \"mod+b\",\n    compose: [\n        \"down\",\n        \"left\",\n        \"right\",\n        \"up\",\n        \"backspace\",\n        \"enter\"\n    ],\n    moveBackward: \"left\",\n    moveForward: \"right\",\n    moveWordBackward: \"ctrl+left\",\n    moveWordForward: \"ctrl+right\",\n    deleteBackward: \"shift?+backspace\",\n    deleteForward: \"shift?+delete\",\n    extendBackward: \"shift+left\",\n    extendForward: \"shift+right\",\n    italic: \"mod+i\",\n    insertSoftBreak: \"shift+enter\",\n    splitBlock: \"enter\",\n    undo: \"mod+z\"\n};\nvar APPLE_HOTKEYS = {\n    moveLineBackward: \"opt+up\",\n    moveLineForward: \"opt+down\",\n    moveWordBackward: \"opt+left\",\n    moveWordForward: \"opt+right\",\n    deleteBackward: [\n        \"ctrl+backspace\",\n        \"ctrl+h\"\n    ],\n    deleteForward: [\n        \"ctrl+delete\",\n        \"ctrl+d\"\n    ],\n    deleteLineBackward: \"cmd+shift?+backspace\",\n    deleteLineForward: [\n        \"cmd+shift?+delete\",\n        \"ctrl+k\"\n    ],\n    deleteWordBackward: \"opt+shift?+backspace\",\n    deleteWordForward: \"opt+shift?+delete\",\n    extendLineBackward: \"opt+shift+up\",\n    extendLineForward: \"opt+shift+down\",\n    redo: \"cmd+shift+z\",\n    transposeCharacter: \"ctrl+t\"\n};\nvar WINDOWS_HOTKEYS = {\n    deleteWordBackward: \"ctrl+shift?+backspace\",\n    deleteWordForward: \"ctrl+shift?+delete\",\n    redo: [\n        \"ctrl+y\",\n        \"ctrl+shift+z\"\n    ]\n};\n/**\n * Create a platform-aware hotkey checker.\n */ var create = (key)=>{\n    var generic = HOTKEYS[key];\n    var apple = APPLE_HOTKEYS[key];\n    var windows = WINDOWS_HOTKEYS[key];\n    var isGeneric = generic && (0,is_hotkey__WEBPACK_IMPORTED_MODULE_5__.isHotkey)(generic);\n    var isApple = apple && (0,is_hotkey__WEBPACK_IMPORTED_MODULE_5__.isHotkey)(apple);\n    var isWindows = windows && (0,is_hotkey__WEBPACK_IMPORTED_MODULE_5__.isHotkey)(windows);\n    return (event)=>{\n        if (isGeneric && isGeneric(event)) return true;\n        if (IS_APPLE && isApple && isApple(event)) return true;\n        if (!IS_APPLE && isWindows && isWindows(event)) return true;\n        return false;\n    };\n};\n/**\n * Hotkeys.\n */ var Hotkeys = {\n    isBold: create(\"bold\"),\n    isCompose: create(\"compose\"),\n    isMoveBackward: create(\"moveBackward\"),\n    isMoveForward: create(\"moveForward\"),\n    isDeleteBackward: create(\"deleteBackward\"),\n    isDeleteForward: create(\"deleteForward\"),\n    isDeleteLineBackward: create(\"deleteLineBackward\"),\n    isDeleteLineForward: create(\"deleteLineForward\"),\n    isDeleteWordBackward: create(\"deleteWordBackward\"),\n    isDeleteWordForward: create(\"deleteWordForward\"),\n    isExtendBackward: create(\"extendBackward\"),\n    isExtendForward: create(\"extendForward\"),\n    isExtendLineBackward: create(\"extendLineBackward\"),\n    isExtendLineForward: create(\"extendLineForward\"),\n    isItalic: create(\"italic\"),\n    isMoveLineBackward: create(\"moveLineBackward\"),\n    isMoveLineForward: create(\"moveLineForward\"),\n    isMoveWordBackward: create(\"moveWordBackward\"),\n    isMoveWordForward: create(\"moveWordForward\"),\n    isRedo: create(\"redo\"),\n    isSoftBreak: create(\"insertSoftBreak\"),\n    isSplitBlock: create(\"splitBlock\"),\n    isTransposeCharacter: create(\"transposeCharacter\"),\n    isUndo: create(\"undo\")\n};\nvar createRestoreDomManager = (editor, receivedUserInput)=>{\n    var bufferedMutations = [];\n    var clear = ()=>{\n        bufferedMutations = [];\n    };\n    var registerMutations = (mutations)=>{\n        if (!receivedUserInput.current) {\n            return;\n        }\n        var trackedMutations = mutations.filter((mutation)=>isTrackedMutation(editor, mutation, mutations));\n        bufferedMutations.push(...trackedMutations);\n    };\n    function restoreDOM() {\n        if (bufferedMutations.length > 0) {\n            bufferedMutations.reverse().forEach((mutation)=>{\n                if (mutation.type === \"characterData\") {\n                    // We don't want to restore the DOM for characterData mutations\n                    // because this interrupts the composition.\n                    return;\n                }\n                mutation.removedNodes.forEach((node)=>{\n                    mutation.target.insertBefore(node, mutation.nextSibling);\n                });\n                mutation.addedNodes.forEach((node)=>{\n                    mutation.target.removeChild(node);\n                });\n            });\n            // Clear buffered mutations to ensure we don't undo them twice\n            clear();\n        }\n    }\n    return {\n        registerMutations,\n        restoreDOM,\n        clear\n    };\n};\nvar MUTATION_OBSERVER_CONFIG = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    characterDataOldValue: true\n};\n// We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\nclass RestoreDOMComponent extends react__WEBPACK_IMPORTED_MODULE_3__.Component {\n    constructor(){\n        super(...arguments);\n        _defineProperty(this, \"context\", null);\n        _defineProperty(this, \"manager\", null);\n        _defineProperty(this, \"mutationObserver\", null);\n    }\n    observe() {\n        var _this$mutationObserve;\n        var { node } = this.props;\n        if (!node.current) {\n            throw new Error(\"Failed to attach MutationObserver, `node` is undefined\");\n        }\n        (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 || _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG);\n    }\n    componentDidMount() {\n        var { receivedUserInput } = this.props;\n        var editor = this.context;\n        this.manager = createRestoreDomManager(editor, receivedUserInput);\n        this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n        this.observe();\n    }\n    getSnapshotBeforeUpdate() {\n        var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n        var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n        if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n            var _this$manager;\n            (_this$manager = this.manager) === null || _this$manager === void 0 || _this$manager.registerMutations(pendingMutations);\n        }\n        (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 || _this$mutationObserve3.disconnect();\n        (_this$manager2 = this.manager) === null || _this$manager2 === void 0 || _this$manager2.restoreDOM();\n        return null;\n    }\n    componentDidUpdate() {\n        var _this$manager3;\n        (_this$manager3 = this.manager) === null || _this$manager3 === void 0 || _this$manager3.clear();\n        this.observe();\n    }\n    componentWillUnmount() {\n        var _this$mutationObserve4;\n        (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 || _this$mutationObserve4.disconnect();\n    }\n    render() {\n        return this.props.children;\n    }\n}\n_defineProperty(RestoreDOMComponent, \"contextType\", EditorContext);\nvar RestoreDOM = IS_ANDROID ? RestoreDOMComponent : (_ref)=>{\n    var { children } = _ref;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, children);\n};\nvar _excluded$1 = [\n    \"autoFocus\",\n    \"decorate\",\n    \"onDOMBeforeInput\",\n    \"placeholder\",\n    \"readOnly\",\n    \"renderElement\",\n    \"renderLeaf\",\n    \"renderPlaceholder\",\n    \"scrollSelectionIntoView\",\n    \"style\",\n    \"as\",\n    \"disableDefaultStyles\"\n], _excluded2 = [\n    \"text\"\n];\nfunction ownKeys$1(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread$1(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nvar Children = (props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement((react__WEBPACK_IMPORTED_MODULE_3___default().Fragment), null, useChildren(props));\n/**\n * Editable.\n */ var Editable = (props)=>{\n    var defaultRenderPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((props)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DefaultPlaceholder, _objectSpread$1({}, props)), []);\n    var { autoFocus, decorate = defaultDecorate, onDOMBeforeInput: propsOnDOMBeforeInput, placeholder, readOnly = false, renderElement, renderLeaf, renderPlaceholder = defaultRenderPlaceholder, scrollSelectionIntoView = defaultScrollSelectionIntoView, style: userStyle = {}, as: Component = \"div\", disableDefaultStyles = false } = props, attributes = _objectWithoutProperties(props, _excluded$1);\n    var editor = useSlate();\n    // Rerender editor when composition status changed\n    var [isComposing, setIsComposing] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var deferredOperations = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    var [placeholderHeight, setPlaceholderHeight] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    var { onUserInput, receivedUserInput } = useTrackUserInput();\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    EDITOR_TO_FORCE_RENDER.set(editor, forceRender);\n    // Update internal state on each render.\n    IS_READ_ONLY.set(editor, readOnly);\n    // Keep track of some state for the event handler logic.\n    var state = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>({\n            isDraggingInternally: false,\n            isUpdatingSelection: false,\n            latestElement: null,\n            hasMarkPlaceholder: false\n        }), []);\n    // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n    // needs to be manually focused.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        if (ref.current && autoFocus) {\n            ref.current.focus();\n        }\n    }, [\n        autoFocus\n    ]);\n    /**\n   * The AndroidInputManager object has a cyclical dependency on onDOMSelectionChange\n   *\n   * It is defined as a reference to simplify hook dependencies and clarify that\n   * it needs to be initialized.\n   */ var androidInputManagerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    // Listen on the native `selectionchange` event to be able to update any time\n    // the selection changes. This is required because React's `onSelect` is leaky\n    // and non-standard so it doesn't fire until after a selection has been\n    // released. This causes issues in situations where another change happens\n    // while a selection is being dragged.\n    var onDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_throttle__WEBPACK_IMPORTED_MODULE_2___default()(()=>{\n            var androidInputManager = androidInputManagerRef.current;\n            if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n                var root = ReactEditor.findDocumentOrShadowRoot(editor);\n                var { activeElement } = root;\n                var el = ReactEditor.toDOMNode(editor, editor);\n                var domSelection = root.getSelection();\n                if (activeElement === el) {\n                    state.latestElement = activeElement;\n                    IS_FOCUSED.set(editor, true);\n                } else {\n                    IS_FOCUSED.delete(editor);\n                }\n                if (!domSelection) {\n                    return slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n                var { anchorNode, focusNode } = domSelection;\n                var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n                var focusNodeSelectable = ReactEditor.hasEditableTarget(editor, focusNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, focusNode);\n                if (anchorNodeSelectable && focusNodeSelectable) {\n                    var range = ReactEditor.toSlateRange(editor, domSelection, {\n                        exactMatch: false,\n                        suppressThrow: true\n                    });\n                    if (range) {\n                        if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                        } else {\n                            androidInputManager === null || androidInputManager === void 0 || androidInputManager.handleUserSelect(range);\n                        }\n                    }\n                }\n                // Deselect the editor if the dom selection is not selectable in readonly mode\n                if (readOnly && (!anchorNodeSelectable || !focusNodeSelectable)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.deselect(editor);\n                }\n            }\n        }, 100), [\n        editor,\n        readOnly,\n        state\n    ]);\n    var scheduleOnDOMSelectionChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(onDOMSelectionChange, 0), [\n        onDOMSelectionChange\n    ]);\n    androidInputManagerRef.current = useAndroidInputManager({\n        node: ref,\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange\n    });\n    useIsomorphicLayoutEffect(()=>{\n        var _androidInputManagerR, _androidInputManagerR2;\n        // Update element-related weak maps with the DOM element ref.\n        var window1;\n        if (ref.current && (window1 = getDefaultView(ref.current))) {\n            EDITOR_TO_WINDOW.set(editor, window1);\n            EDITOR_TO_ELEMENT.set(editor, ref.current);\n            NODE_TO_ELEMENT.set(editor, ref.current);\n            ELEMENT_TO_NODE.set(ref.current, editor);\n        } else {\n            NODE_TO_ELEMENT.delete(editor);\n        }\n        // Make sure the DOM selection state is in sync.\n        var { selection } = editor;\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var domSelection = root.getSelection();\n        if (!domSelection || !ReactEditor.isFocused(editor) || (_androidInputManagerR = androidInputManagerRef.current) !== null && _androidInputManagerR !== void 0 && _androidInputManagerR.hasPendingAction()) {\n            return;\n        }\n        var setDomSelection = (forceChange)=>{\n            var hasDomSelection = domSelection.type !== \"None\";\n            // If the DOM selection is properly unset, we're done.\n            if (!selection && !hasDomSelection) {\n                return;\n            }\n            // Get anchorNode and focusNode\n            var focusNode = domSelection.focusNode;\n            var anchorNode;\n            // COMPAT: In firefox the normal seletion way does not work\n            // (https://github.com/ianstormtaylor/slate/pull/5486#issue-1820720223)\n            if (IS_FIREFOX && domSelection.rangeCount > 1) {\n                var firstRange = domSelection.getRangeAt(0);\n                var lastRange = domSelection.getRangeAt(domSelection.rangeCount - 1);\n                // Right to left\n                if (firstRange.startContainer === focusNode) {\n                    anchorNode = lastRange.endContainer;\n                } else {\n                    // Left to right\n                    anchorNode = firstRange.startContainer;\n                }\n            } else {\n                anchorNode = domSelection.anchorNode;\n            }\n            // verify that the dom selection is in the editor\n            var editorElement = EDITOR_TO_ELEMENT.get(editor);\n            var hasDomSelectionInEditor = false;\n            if (editorElement.contains(anchorNode) && editorElement.contains(focusNode)) {\n                hasDomSelectionInEditor = true;\n            }\n            // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n            if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n                var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: true,\n                    // domSelection is not necessarily a valid Slate range\n                    // (e.g. when clicking on contentEditable:false element)\n                    suppressThrow: true\n                });\n                if (slateRange && slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(slateRange, selection)) {\n                    var _anchorNode;\n                    if (!state.hasMarkPlaceholder) {\n                        return;\n                    }\n                    // Ensure selection is inside the mark placeholder\n                    if ((_anchorNode = anchorNode) !== null && _anchorNode !== void 0 && (_anchorNode = _anchorNode.parentElement) !== null && _anchorNode !== void 0 && _anchorNode.hasAttribute(\"data-slate-mark-placeholder\")) {\n                        return;\n                    }\n                }\n            }\n            // when <Editable/> is being controlled through external value\n            // then its children might just change - DOM responds to it on its own\n            // but Slate's value is not being updated through any operation\n            // and thus it doesn't transform selection on its own\n            if (selection && !ReactEditor.hasRange(editor, selection)) {\n                editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n                    exactMatch: false,\n                    suppressThrow: true\n                });\n                return;\n            }\n            // Otherwise the DOM selection is out of sync, so update it.\n            state.isUpdatingSelection = true;\n            var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n            if (newDomRange) {\n                if (ReactEditor.isComposing(editor) && !IS_ANDROID) {\n                    domSelection.collapseToEnd();\n                } else if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isBackward(selection)) {\n                    domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n                } else {\n                    domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n                }\n                scrollSelectionIntoView(editor, newDomRange);\n            } else {\n                domSelection.removeAllRanges();\n            }\n            return newDomRange;\n        };\n        // In firefox if there is more then 1 range and we call setDomSelection we remove the ability to select more cells in a table\n        if (domSelection.rangeCount <= 1) {\n            setDomSelection();\n        }\n        var ensureSelection = ((_androidInputManagerR2 = androidInputManagerRef.current) === null || _androidInputManagerR2 === void 0 ? void 0 : _androidInputManagerR2.isFlushing()) === \"action\";\n        if (!IS_ANDROID || !ensureSelection) {\n            setTimeout(()=>{\n                state.isUpdatingSelection = false;\n            });\n            return;\n        }\n        var timeoutId = null;\n        var animationFrameId = requestAnimationFrame(()=>{\n            if (ensureSelection) {\n                var ensureDomSelection = (forceChange)=>{\n                    try {\n                        var el = ReactEditor.toDOMNode(editor, editor);\n                        el.focus();\n                        setDomSelection(forceChange);\n                    } catch (e) {\n                    // Ignore, dom and state might be out of sync\n                    }\n                };\n                // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n                // This essentially would make setting the slate selection during an update meaningless, so we force it\n                // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n                // visible flicker.\n                ensureDomSelection();\n                timeoutId = setTimeout(()=>{\n                    // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n                    // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n                    // the animation frame to ensure it displays the correct state.\n                    ensureDomSelection(true);\n                    state.isUpdatingSelection = false;\n                });\n            }\n        });\n        return ()=>{\n            cancelAnimationFrame(animationFrameId);\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n        };\n    });\n    // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n    // is required because React's `beforeinput` is fake and never really attaches\n    // to the real event sadly. (2019/11/01)\n    // https://github.com/facebook/react/issues/11211\n    var onDOMBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n        onUserInput();\n        if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n            var _EDITOR_TO_USER_SELEC;\n            // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n            if (androidInputManagerRef.current) {\n                return androidInputManagerRef.current.handleDOMBeforeInput(event);\n            }\n            // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n            // triggering a `beforeinput` expecting the change to be applied to the immediately before\n            // set selection.\n            scheduleOnDOMSelectionChange.flush();\n            onDOMSelectionChange.flush();\n            var { selection } = editor;\n            var { inputType: type } = event;\n            var data = event.dataTransfer || event.data || undefined;\n            var isCompositionChange = type === \"insertCompositionText\" || type === \"deleteCompositionText\";\n            // COMPAT: use composition change events as a hint to where we should insert\n            // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n            if (isCompositionChange && ReactEditor.isComposing(editor)) {\n                return;\n            }\n            var native = false;\n            if (type === \"insertText\" && selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.\n            // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n            // causes duplicate inserts.\n            event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n            // When there is an inline element, e.g. a link, and you select\n            // right after it (the start of the next node).\n            selection.anchor.offset !== 0) {\n                var _node$parentElement, _window$getComputedSt;\n                native = true;\n                // Skip native if there are marks, as\n                // `insertText` will insert a node, not just text.\n                if (editor.marks) {\n                    native = false;\n                }\n                // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n                // Therefore we don't allow native events to insert text at the end of anchor nodes.\n                var { anchor } = selection;\n                var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n                var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest(\"a\");\n                var window1 = ReactEditor.getWindow(editor);\n                if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n                    var _lastText$textContent;\n                    // Find the last text node inside the anchor.\n                    var lastText = window1 === null || window1 === void 0 ? void 0 : window1.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n                    if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n                        native = false;\n                    }\n                }\n                // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n                // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n                if (native && node.parentElement && (window1 === null || window1 === void 0 || (_window$getComputedSt = window1.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === \"pre\") {\n                    var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                        at: anchor.path,\n                        match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n)\n                    });\n                    if (block && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(block[0]).includes(\"\t\")) {\n                        native = false;\n                    }\n                }\n            }\n            // COMPAT: For the deleting forward/backward input types we don't want\n            // to change the selection because it is the range that will be deleted,\n            // and those commands determine that for themselves.\n            if (!type.startsWith(\"delete\") || type.startsWith(\"deleteBy\")) {\n                var [targetRange] = event.getTargetRanges();\n                if (targetRange) {\n                    var range = ReactEditor.toSlateRange(editor, targetRange, {\n                        exactMatch: false,\n                        suppressThrow: false\n                    });\n                    if (!selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(selection, range)) {\n                        native = false;\n                        var selectionRef = !isCompositionChange && editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.rangeRef(editor, editor.selection);\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                        if (selectionRef) {\n                            EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n                        }\n                    }\n                }\n            }\n            // Composition change types occur while a user is composing text and can't be\n            // cancelled. Let them through and wait for the composition to end.\n            if (isCompositionChange) {\n                return;\n            }\n            if (!native) {\n                event.preventDefault();\n            }\n            // COMPAT: If the selection is expanded, even if the command seems like\n            // a delete forward/backward command it should delete the selection.\n            if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection) && type.startsWith(\"delete\")) {\n                var direction = type.endsWith(\"Backward\") ? \"backward\" : \"forward\";\n                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                    direction\n                });\n                return;\n            }\n            switch(type){\n                case \"deleteByComposition\":\n                case \"deleteByCut\":\n                case \"deleteByDrag\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                        break;\n                    }\n                case \"deleteContent\":\n                case \"deleteContentForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        break;\n                    }\n                case \"deleteContentBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        break;\n                    }\n                case \"deleteEntireSoftLine\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteHardLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"block\"\n                        });\n                        break;\n                    }\n                case \"deleteSoftLineForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"line\"\n                        });\n                        break;\n                    }\n                case \"deleteWordBackward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"deleteWordForward\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                            unit: \"word\"\n                        });\n                        break;\n                    }\n                case \"insertLineBreak\":\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                    break;\n                case \"insertParagraph\":\n                    {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        break;\n                    }\n                case \"insertFromComposition\":\n                case \"insertFromDrop\":\n                case \"insertFromPaste\":\n                case \"insertFromYank\":\n                case \"insertReplacementText\":\n                case \"insertText\":\n                    {\n                        if (type === \"insertFromComposition\") {\n                            // COMPAT: in Safari, `compositionend` is dispatched after the\n                            // `beforeinput` for \"insertFromComposition\". But if we wait for it\n                            // then we will abort because we're still composing and the selection\n                            // won't be updated properly.\n                            // https://www.w3.org/TR/input-events-2/\n                            if (ReactEditor.isComposing(editor)) {\n                                setIsComposing(false);\n                                IS_COMPOSING.set(editor, false);\n                            }\n                        }\n                        // use a weak comparison instead of 'instanceof' to allow\n                        // programmatic access of paste events coming from external windows\n                        // like cypress where cy.window does not work realibly\n                        if ((data === null || data === void 0 ? void 0 : data.constructor.name) === \"DataTransfer\") {\n                            ReactEditor.insertData(editor, data);\n                        } else if (typeof data === \"string\") {\n                            // Only insertText operations use the native functionality, for now.\n                            // Potentially expand to single character deletes, as well.\n                            if (native) {\n                                deferredOperations.current.push(()=>slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data));\n                            } else {\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, data);\n                            }\n                        }\n                        break;\n                    }\n            }\n            // Restore the actual user section if nothing manually set it.\n            var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n            EDITOR_TO_USER_SELECTION.delete(editor);\n            if (toRestore && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(editor.selection, toRestore))) {\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, toRestore);\n            }\n        }\n    }, [\n        editor,\n        onDOMSelectionChange,\n        onUserInput,\n        propsOnDOMBeforeInput,\n        readOnly,\n        scheduleOnDOMSelectionChange\n    ]);\n    var callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((node)=>{\n        if (node == null) {\n            onDOMSelectionChange.cancel();\n            scheduleOnDOMSelectionChange.cancel();\n            EDITOR_TO_ELEMENT.delete(editor);\n            NODE_TO_ELEMENT.delete(editor);\n            if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                ref.current.removeEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        } else {\n            // Attach a native DOM event handler for `beforeinput` events, because React's\n            // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n            // real `beforeinput` events sadly... (2019/11/04)\n            // https://github.com/facebook/react/issues/11211\n            if (HAS_BEFORE_INPUT_SUPPORT) {\n                // @ts-ignore The `beforeinput` event isn't recognized.\n                node.addEventListener(\"beforeinput\", onDOMBeforeInput);\n            }\n        }\n        ref.current = node;\n    }, [\n        onDOMSelectionChange,\n        scheduleOnDOMSelectionChange,\n        editor,\n        onDOMBeforeInput\n    ]);\n    // Attach a native DOM event handler for `selectionchange`, because React's\n    // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n    // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n    // fire for any change to the selection inside the editor. (2019/11/04)\n    // https://github.com/facebook/react/issues/5785\n    useIsomorphicLayoutEffect(()=>{\n        var window1 = ReactEditor.getWindow(editor);\n        window1.document.addEventListener(\"selectionchange\", scheduleOnDOMSelectionChange);\n        return ()=>{\n            window1.document.removeEventListener(\"selectionchange\", scheduleOnDOMSelectionChange);\n        };\n    }, [\n        scheduleOnDOMSelectionChange\n    ]);\n    var decorations = decorate([\n        editor,\n        []\n    ]);\n    var showPlaceholder = placeholder && editor.children.length === 1 && Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Node.texts(editor)).length === 1 && slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(editor) === \"\" && !isComposing;\n    var placeHolderResizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((placeholderEl)=>{\n        if (placeholderEl && showPlaceholder) {\n            var _placeholderEl$getBou;\n            setPlaceholderHeight((_placeholderEl$getBou = placeholderEl.getBoundingClientRect()) === null || _placeholderEl$getBou === void 0 ? void 0 : _placeholderEl$getBou.height);\n        } else {\n            setPlaceholderHeight(undefined);\n        }\n    }, [\n        showPlaceholder\n    ]);\n    if (showPlaceholder) {\n        var start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, []);\n        decorations.push({\n            [PLACEHOLDER_SYMBOL]: true,\n            placeholder,\n            onPlaceholderResize: placeHolderResizeHandler,\n            anchor: start,\n            focus: start\n        });\n    }\n    var { marks } = editor;\n    state.hasMarkPlaceholder = false;\n    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection) && marks) {\n        var { anchor } = editor.selection;\n        var leaf = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, anchor.path);\n        var rest = _objectWithoutProperties(leaf, _excluded2);\n        // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(leaf, marks, {\n            loose: true\n        })) {\n            state.hasMarkPlaceholder = true;\n            var unset = Object.fromEntries(Object.keys(rest).map((mark)=>[\n                    mark,\n                    null\n                ]));\n            decorations.push(_objectSpread$1(_objectSpread$1(_objectSpread$1({\n                [MARK_PLACEHOLDER_SYMBOL]: true\n            }, unset), marks), {}, {\n                anchor,\n                focus: anchor\n            }));\n        }\n    }\n    // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n    // before we receive the composition end event.\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setTimeout(()=>{\n            var { selection } = editor;\n            if (selection) {\n                var { anchor: _anchor } = selection;\n                var _text = slate__WEBPACK_IMPORTED_MODULE_7__.Node.leaf(editor, _anchor.path);\n                // While marks isn't a 'complete' text, we can still use loose Text.equals\n                // here which only compares marks anyway.\n                if (marks && !slate__WEBPACK_IMPORTED_MODULE_7__.Text.equals(_text, marks, {\n                    loose: true\n                })) {\n                    EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n                    return;\n                }\n            }\n            EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        });\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ReadOnlyContext.Provider, {\n        value: readOnly\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(DecorateContext.Provider, {\n        value: decorate\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(RestoreDOM, {\n        node: ref,\n        receivedUserInput: receivedUserInput\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Component, _objectSpread$1(_objectSpread$1({\n        role: readOnly ? undefined : \"textbox\",\n        \"aria-multiline\": readOnly ? undefined : true\n    }, attributes), {}, {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n        // have to use hacks to make these replacement-based features work.\n        // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n        // mismatch warning app moves to browser. Pass-through consumer props when\n        // not CAN_USE_DOM (SSR) and default to falsy value\n        spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,\n        autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : \"false\",\n        autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : \"false\",\n        \"data-slate-editor\": true,\n        \"data-slate-node\": \"value\",\n        // explicitly set this\n        contentEditable: !readOnly,\n        // in some cases, a decoration needs access to the range / selection to decorate a text node,\n        // then you will select the whole text node when you select part the of text\n        // this magic zIndex=\"-1\" will fix it\n        zindex: -1,\n        suppressContentEditableWarning: true,\n        ref: callbackRef,\n        style: _objectSpread$1(_objectSpread$1({}, disableDefaultStyles ? {} : _objectSpread$1({\n            // Allow positioning relative to the editable element.\n            position: \"relative\",\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: \"pre-wrap\",\n            // Allow words to break if they are too long.\n            wordWrap: \"break-word\"\n        }, placeholderHeight ? {\n            minHeight: placeholderHeight\n        } : {})), userStyle),\n        onBeforeInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n            // fall back to React's leaky polyfill instead just for it. It\n            // only works for the `insertText` input type.\n            if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n                event.preventDefault();\n                if (!ReactEditor.isComposing(editor)) {\n                    var _text2 = event.data;\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, _text2);\n                }\n            }\n        }, [\n            attributes.onBeforeInput,\n            editor,\n            readOnly\n        ]),\n        onInput: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (isEventHandled(event, attributes.onInput)) {\n                return;\n            }\n            if (androidInputManagerRef.current) {\n                androidInputManagerRef.current.handleInput();\n                return;\n            }\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (var op of deferredOperations.current){\n                op();\n            }\n            deferredOperations.current = [];\n        }, [\n            attributes.onInput\n        ]),\n        onBlur: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n                return;\n            }\n            // COMPAT: If the current `activeElement` is still the previous\n            // one, this is due to the window being blurred when the tab\n            // itself becomes unfocused, so we want to abort early to allow to\n            // editor to stay focused when the tab becomes focused again.\n            var root = ReactEditor.findDocumentOrShadowRoot(editor);\n            if (state.latestElement === root.activeElement) {\n                return;\n            }\n            var { relatedTarget } = event;\n            var el = ReactEditor.toDOMNode(editor, editor);\n            // COMPAT: The event should be ignored if the focus is returning\n            // to the editor from an embedded editable element (eg. an <input>\n            // element inside a void node).\n            if (relatedTarget === el) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving from\n            // the editor to inside a void node's spacer element.\n            if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute(\"data-slate-spacer\")) {\n                return;\n            }\n            // COMPAT: The event should be ignored if the focus is moving to a\n            // non- editable section of an element that isn't a void node (eg.\n            // a list item of the check list example).\n            if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n                var node = ReactEditor.toSlateNode(editor, relatedTarget);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && !editor.isVoid(node)) {\n                    return;\n                }\n            }\n            // COMPAT: Safari doesn't always remove the selection even if the content-\n            // editable element no longer has focus. Refer to:\n            // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n            if (IS_WEBKIT) {\n                var domSelection = root.getSelection();\n                domSelection === null || domSelection === void 0 || domSelection.removeAllRanges();\n            }\n            IS_FOCUSED.delete(editor);\n        }, [\n            readOnly,\n            state.isUpdatingSelection,\n            state.latestElement,\n            editor,\n            attributes.onBlur\n        ]),\n        onClick: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.hasPath(editor, path) || slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, path) !== node) {\n                    return;\n                }\n                if (event.detail === TRIPLE_CLICK && path.length >= 1) {\n                    var blockPath = path;\n                    if (!(slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, node))) {\n                        var _block$;\n                        var block = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                            match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, n),\n                            at: path\n                        });\n                        blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n                    }\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, blockPath);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                    return;\n                }\n                if (readOnly) {\n                    return;\n                }\n                var _start = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.start(editor, path);\n                var end = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.end(editor, path);\n                var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: _start\n                });\n                var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: end\n                });\n                if (startVoid && endVoid && slate__WEBPACK_IMPORTED_MODULE_7__.Path.equals(startVoid[1], endVoid[1])) {\n                    var _range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, _start);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, _range);\n                }\n            }\n        }, [\n            editor,\n            attributes.onClick,\n            readOnly\n        ]),\n        onCompositionEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR3;\n                if (ReactEditor.isComposing(editor)) {\n                    setIsComposing(false);\n                    IS_COMPOSING.set(editor, false);\n                }\n                (_androidInputManagerR3 = androidInputManagerRef.current) === null || _androidInputManagerR3 === void 0 || _androidInputManagerR3.handleCompositionEnd(event);\n                if (isEventHandled(event, attributes.onCompositionEnd) || IS_ANDROID) {\n                    return;\n                }\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (!IS_WEBKIT && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {\n                    var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n                    EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n                    // Ensure we insert text with the marks the user was actually seeing\n                    if (placeholderMarks !== undefined) {\n                        EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n                        editor.marks = placeholderMarks;\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertText(editor, event.data);\n                    var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n                    EDITOR_TO_USER_MARKS.delete(editor);\n                    if (userMarks !== undefined) {\n                        editor.marks = userMarks;\n                    }\n                }\n            }\n        }, [\n            attributes.onCompositionEnd,\n            editor\n        ]),\n        onCompositionUpdate: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n                if (!ReactEditor.isComposing(editor)) {\n                    setIsComposing(true);\n                    IS_COMPOSING.set(editor, true);\n                }\n            }\n        }, [\n            attributes.onCompositionUpdate,\n            editor\n        ]),\n        onCompositionStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n                var _androidInputManagerR4;\n                (_androidInputManagerR4 = androidInputManagerRef.current) === null || _androidInputManagerR4 === void 0 || _androidInputManagerR4.handleCompositionStart(event);\n                if (isEventHandled(event, attributes.onCompositionStart) || IS_ANDROID) {\n                    return;\n                }\n                setIsComposing(true);\n                var { selection } = editor;\n                if (selection) {\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                        return;\n                    }\n                    var inline = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(editor, {\n                        match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, n),\n                        mode: \"highest\"\n                    });\n                    if (inline) {\n                        var [, inlinePath] = inline;\n                        if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEnd(editor, selection.anchor, inlinePath)) {\n                            var point = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.after(editor, inlinePath);\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.setSelection(editor, {\n                                anchor: point,\n                                focus: point\n                            });\n                        }\n                    }\n                }\n            }\n        }, [\n            attributes.onCompositionStart,\n            editor\n        ]),\n        onCopy: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"copy\");\n            }\n        }, [\n            attributes.onCopy,\n            editor\n        ]),\n        onCut: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut) && !isDOMEventTargetInput(event)) {\n                event.preventDefault();\n                ReactEditor.setFragmentData(editor, event.clipboardData, \"cut\");\n                var { selection } = editor;\n                if (selection) {\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor);\n                    } else {\n                        var node = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                        if (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor);\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onCut\n        ]),\n        onDragOver: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node)) {\n                    event.preventDefault();\n                }\n            }\n        }, [\n            attributes.onDragOver,\n            editor\n        ]),\n        onDragStart: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n                var node = ReactEditor.toSlateNode(editor, event.target);\n                var path = ReactEditor.findPath(editor, node);\n                var voidMatch = slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(node) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, node) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                    at: path,\n                    voids: true\n                });\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                    var range = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, path);\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                }\n                state.isDraggingInternally = true;\n                ReactEditor.setFragmentData(editor, event.dataTransfer, \"drag\");\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onDragStart,\n            state\n        ]),\n        onDrop: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n                event.preventDefault();\n                // Keep a reference to the dragged range before updating selection\n                var draggedRange = editor.selection;\n                // Find the range where the drop happened\n                var range = ReactEditor.findEventRange(editor, event);\n                var data = event.dataTransfer;\n                slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.select(editor, range);\n                if (state.isDraggingInternally) {\n                    if (draggedRange && !slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(draggedRange, range) && !slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(editor, {\n                        at: range,\n                        voids: true\n                    })) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(editor, {\n                            at: draggedRange\n                        });\n                    }\n                }\n                ReactEditor.insertData(editor, data);\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                    ReactEditor.focus(editor);\n                }\n            }\n            state.isDraggingInternally = false;\n        }, [\n            readOnly,\n            editor,\n            attributes.onDrop,\n            state\n        ]),\n        onDragEnd: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n                attributes.onDragEnd(event);\n            }\n            // When dropping on a different droppable element than the current editor,\n            // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n            // Note: `onDragEnd` is only called when `onDrop` is not called\n            state.isDraggingInternally = false;\n        }, [\n            readOnly,\n            state,\n            attributes,\n            editor\n        ]),\n        onFocus: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n                var el = ReactEditor.toDOMNode(editor, editor);\n                var root = ReactEditor.findDocumentOrShadowRoot(editor);\n                state.latestElement = root.activeElement;\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                    el.focus();\n                    return;\n                }\n                IS_FOCUSED.set(editor, true);\n            }\n        }, [\n            readOnly,\n            state,\n            editor,\n            attributes.onFocus\n        ]),\n        onKeyDown: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n                var _androidInputManagerR5;\n                (_androidInputManagerR5 = androidInputManagerRef.current) === null || _androidInputManagerR5 === void 0 || _androidInputManagerR5.handleKeyDown(event);\n                var { nativeEvent } = event;\n                // COMPAT: The composition end event isn't fired reliably in all browsers,\n                // so we sometimes might end up stuck in a composition state even though we\n                // aren't composing any more.\n                if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n                    IS_COMPOSING.set(editor, false);\n                    setIsComposing(false);\n                }\n                if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n                    return;\n                }\n                var { selection } = editor;\n                var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n                var isRTL = direction__WEBPACK_IMPORTED_MODULE_0___default()(slate__WEBPACK_IMPORTED_MODULE_7__.Node.string(element)) === \"rtl\";\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                    event.preventDefault();\n                    var maybeHistoryEditor = editor;\n                    if (typeof maybeHistoryEditor.redo === \"function\") {\n                        maybeHistoryEditor.redo();\n                    }\n                    return;\n                }\n                if (Hotkeys.isUndo(nativeEvent)) {\n                    event.preventDefault();\n                    var _maybeHistoryEditor = editor;\n                    if (typeof _maybeHistoryEditor.undo === \"function\") {\n                        _maybeHistoryEditor.undo();\n                    }\n                    return;\n                }\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\"\n                    });\n                    return;\n                }\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\",\n                        reverse: true\n                    });\n                    return;\n                }\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                    event.preventDefault();\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"line\",\n                        edge: \"focus\"\n                    });\n                    return;\n                }\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: !isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"start\"\n                        });\n                    }\n                    return;\n                }\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                            reverse: isRTL\n                        });\n                    } else {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"end\"\n                        });\n                    }\n                    return;\n                }\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: !isRTL\n                    });\n                    return;\n                }\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                    event.preventDefault();\n                    if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.collapse(editor, {\n                            edge: \"focus\"\n                        });\n                    }\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.move(editor, {\n                        unit: \"word\",\n                        reverse: isRTL\n                    });\n                    return;\n                }\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                    // We don't have a core behavior for these, but they change the\n                    // DOM if we don't prevent them, so we have to.\n                    if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n                        event.preventDefault();\n                        return;\n                    }\n                    if (Hotkeys.isSoftBreak(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertSoftBreak(editor);\n                        return;\n                    }\n                    if (Hotkeys.isSplitBlock(nativeEvent)) {\n                        event.preventDefault();\n                        slate__WEBPACK_IMPORTED_MODULE_7__.Editor.insertBreak(editor);\n                        return;\n                    }\n                    if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor);\n                        }\n                        return;\n                    }\n                    if (Hotkeys.isDeleteForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor);\n                        }\n                        return;\n                    }\n                    if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"line\"\n                            });\n                        }\n                        return;\n                    }\n                    if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"backward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                    if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                        event.preventDefault();\n                        if (selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isExpanded(selection)) {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteFragment(editor, {\n                                direction: \"forward\"\n                            });\n                        } else {\n                            slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteForward(editor, {\n                                unit: \"word\"\n                            });\n                        }\n                        return;\n                    }\n                } else {\n                    if (IS_CHROME || IS_WEBKIT) {\n                        // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                        // an event when deleting backwards in a selected void inline node\n                        if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection)) {\n                            var currentNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.parent(editor, selection.anchor.path);\n                            if (slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(currentNode) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isVoid(editor, currentNode) && (slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isInline(editor, currentNode) || slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(editor, currentNode))) {\n                                event.preventDefault();\n                                slate__WEBPACK_IMPORTED_MODULE_7__.Editor.deleteBackward(editor, {\n                                    unit: \"block\"\n                                });\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onKeyDown\n        ]),\n        onPaste: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((event)=>{\n            if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                // COMPAT: Safari InputEvents generated by pasting won't include\n                // application/x-slate-fragment items, so use the\n                // ClipboardEvent here. (2023/03/15)\n                if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent) || IS_WEBKIT) {\n                    event.preventDefault();\n                    ReactEditor.insertData(editor, event.clipboardData);\n                }\n            }\n        }, [\n            readOnly,\n            editor,\n            attributes.onPaste\n        ])\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Children, {\n        decorations: decorations,\n        node: editor,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: editor.selection\n    })))));\n};\n/**\n * The default placeholder element\n */ var DefaultPlaceholder = (_ref)=>{\n    var { attributes, children } = _ref;\n    return(/*#__PURE__*/ // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"span\", _objectSpread$1({}, attributes), children, IS_ANDROID && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(\"br\", null)));\n};\n/**\n * A default memoized decorate function.\n */ var defaultDecorate = ()=>[];\n/**\n * A default implement to scroll dom range into view.\n */ var defaultScrollSelectionIntoView = (editor, domRange)=>{\n    // This was affecting the selection of multiple blocks and dragging behavior,\n    // so enabled only if the selection has been collapsed.\n    if (domRange.getBoundingClientRect && (!editor.selection || editor.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(editor.selection))) {\n        var leafEl = domRange.startContainer.parentElement;\n        leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n        (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(leafEl, {\n            scrollMode: \"if-needed\"\n        });\n        // @ts-expect-error an unorthodox delete D:\n        delete leafEl.getBoundingClientRect;\n    }\n};\n/**\n * Check if an event is overrided by a handler.\n */ var isEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\n * Check if the event's target is an input element\n */ var isDOMEventTargetInput = (event)=>{\n    return isDOMNode(event.target) && (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement);\n};\n/**\n * Check if a DOM event is overrided by a handler.\n */ var isDOMEventHandled = (event, handler)=>{\n    if (!handler) {\n        return false;\n    }\n    // The custom event handler may return a boolean to specify whether the event\n    // shall be treated as being handled or not.\n    var shouldTreatEventAsHandled = handler(event);\n    if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n    }\n    return event.defaultPrevented;\n};\n/**\n * A React context for sharing the `focused` state of the editor.\n */ var FocusedContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(false);\n/**\n * Get the current `focused` state of the editor.\n */ var useFocused = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(FocusedContext);\n};\nfunction isError(error) {\n    return error instanceof Error;\n}\n/**\n * A React context for sharing the editor selector context in a way to control rerenders\n */ var SlateSelectorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nvar refEquality = (a, b)=>a === b;\n/**\n * use redux style selectors to prevent rerendering on every keystroke.\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\n *\n * Example:\n * ```\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\n * ```\n */ function useSlateSelector(selector) {\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n    var [, forceRender] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)((s)=>s + 1, 0);\n    var context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SlateSelectorContext);\n    if (!context) {\n        throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n    }\n    var { getSlate, addEventListener } = context;\n    var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n    var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(()=>null);\n    var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    var selectedState;\n    try {\n        if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n            selectedState = selector(getSlate());\n        } else {\n            selectedState = latestSelectedState.current;\n        }\n    } catch (err) {\n        if (latestSubscriptionCallbackError.current && isError(err)) {\n            err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n        }\n        throw err;\n    }\n    useIsomorphicLayoutEffect(()=>{\n        latestSelector.current = selector;\n        latestSelectedState.current = selectedState;\n        latestSubscriptionCallbackError.current = undefined;\n    });\n    useIsomorphicLayoutEffect(()=>{\n        function checkForUpdates() {\n            try {\n                var newSelectedState = latestSelector.current(getSlate());\n                if (equalityFn(newSelectedState, latestSelectedState.current)) {\n                    return;\n                }\n                latestSelectedState.current = newSelectedState;\n            } catch (err) {\n                // we ignore all errors here, since when the component\n                // is re-rendered, the selectors are called again, and\n                // will throw again, if neither props nor store state\n                // changed\n                if (err instanceof Error) {\n                    latestSubscriptionCallbackError.current = err;\n                } else {\n                    latestSubscriptionCallbackError.current = new Error(String(err));\n                }\n            }\n            forceRender();\n        }\n        var unsubscribe = addEventListener(checkForUpdates);\n        checkForUpdates();\n        return ()=>unsubscribe();\n    }, // don't rerender on equalityFn change since we want to be able to define it inline\n    [\n        addEventListener,\n        getSlate\n    ]);\n    return selectedState;\n}\n/**\n * Create selector context with editor updating on every editor change\n */ function useSelectorContext(editor) {\n    var eventListeners = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]).current;\n    var slateRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)({\n        editor\n    }).current;\n    var onChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((editor)=>{\n        slateRef.editor = editor;\n        eventListeners.forEach((listener)=>listener(editor));\n    }, [\n        eventListeners,\n        slateRef\n    ]);\n    var selectorContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(()=>{\n        return {\n            getSlate: ()=>slateRef.editor,\n            addEventListener: (callback)=>{\n                eventListeners.push(callback);\n                return ()=>{\n                    eventListeners.splice(eventListeners.indexOf(callback), 1);\n                };\n            }\n        };\n    }, [\n        eventListeners,\n        slateRef\n    ]);\n    return {\n        selectorContext,\n        onChange\n    };\n}\nvar _excluded = [\n    \"editor\",\n    \"children\",\n    \"onChange\",\n    \"onSelectionChange\",\n    \"onValueChange\",\n    \"initialValue\"\n];\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */ var Slate = (props)=>{\n    var { editor, children, onChange, onSelectionChange, onValueChange, initialValue } = props, rest = _objectWithoutProperties(props, _excluded);\n    var [context, setContext] = react__WEBPACK_IMPORTED_MODULE_3___default().useState(()=>{\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Node.isNodeList(initialValue)) {\n            throw new Error(\"[Slate] initialValue is invalid! Expected a list of elements but got: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(initialValue)));\n        }\n        if (!slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isEditor(editor)) {\n            throw new Error(\"[Slate] editor is invalid! You passed: \".concat(slate__WEBPACK_IMPORTED_MODULE_7__.Scrubber.stringify(editor)));\n        }\n        editor.children = initialValue;\n        Object.assign(editor, rest);\n        return {\n            v: 0,\n            editor\n        };\n    });\n    var { selectorContext, onChange: handleSelectorChange } = useSelectorContext(editor);\n    var onContextChange = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((options)=>{\n        var _options$operation;\n        if (onChange) {\n            onChange(editor.children);\n        }\n        switch(options === null || options === void 0 || (_options$operation = options.operation) === null || _options$operation === void 0 ? void 0 : _options$operation.type){\n            case \"set_selection\":\n                onSelectionChange === null || onSelectionChange === void 0 || onSelectionChange(editor.selection);\n                break;\n            default:\n                onValueChange === null || onValueChange === void 0 || onValueChange(editor.children);\n        }\n        setContext((prevContext)=>({\n                v: prevContext.v + 1,\n                editor\n            }));\n        handleSelectorChange(editor);\n    }, [\n        editor,\n        handleSelectorChange,\n        onChange,\n        onSelectionChange,\n        onValueChange\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n        return ()=>{\n            EDITOR_TO_ON_CHANGE.set(editor, ()=>{});\n        };\n    }, [\n        editor,\n        onContextChange\n    ]);\n    var [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(ReactEditor.isFocused(editor));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        setIsFocused(ReactEditor.isFocused(editor));\n    }, [\n        editor\n    ]);\n    useIsomorphicLayoutEffect(()=>{\n        var fn = ()=>setIsFocused(ReactEditor.isFocused(editor));\n        if (REACT_MAJOR_VERSION >= 17) {\n            // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n            // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n            // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n            document.addEventListener(\"focusin\", fn);\n            document.addEventListener(\"focusout\", fn);\n            return ()=>{\n                document.removeEventListener(\"focusin\", fn);\n                document.removeEventListener(\"focusout\", fn);\n            };\n        } else {\n            document.addEventListener(\"focus\", fn, true);\n            document.addEventListener(\"blur\", fn, true);\n            return ()=>{\n                document.removeEventListener(\"focus\", fn, true);\n                document.removeEventListener(\"blur\", fn, true);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateSelectorContext.Provider, {\n        value: selectorContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(SlateContext.Provider, {\n        value: context\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(EditorContext.Provider, {\n        value: context.editor\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(FocusedContext.Provider, {\n        value: isFocused\n    }, children))));\n};\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */ var useEditor = ()=>{\n    var editor = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(EditorContext);\n    if (!editor) {\n        throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n    }\n    return editor;\n};\n/**\n * Get the current slate selection.\n * Only triggers a rerender when the selection actually changes\n */ var useSlateSelection = ()=>{\n    return useSlateSelector((editor)=>editor.selection, isSelectionEqual);\n};\nvar isSelectionEqual = (a, b)=>{\n    if (!a && !b) return true;\n    if (!a || !b) return false;\n    return slate__WEBPACK_IMPORTED_MODULE_7__.Range.equals(a, b);\n};\n/**\n * Utilities for single-line deletion\n */ var doRectsIntersect = (rect, compareRect)=>{\n    var middle = (compareRect.top + compareRect.bottom) / 2;\n    return rect.top <= middle && rect.bottom >= middle;\n};\nvar areRangesSameLine = (editor, range1, range2)=>{\n    var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();\n    var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();\n    return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);\n};\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */ var findCurrentLineRange = (editor, parentRange)=>{\n    var parentRangeBoundary = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, slate__WEBPACK_IMPORTED_MODULE_7__.Range.end(parentRange));\n    var positions = Array.from(slate__WEBPACK_IMPORTED_MODULE_7__.Editor.positions(editor, {\n        at: parentRange\n    }));\n    var left = 0;\n    var right = positions.length;\n    var middle = Math.floor(right / 2);\n    if (areRangesSameLine(editor, slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, positions[left]), parentRangeBoundary)) {\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, positions[left], parentRangeBoundary);\n    }\n    if (positions.length < 2) {\n        return slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n    }\n    while(middle !== positions.length && middle !== left){\n        if (areRangesSameLine(editor, slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, positions[middle]), parentRangeBoundary)) {\n            right = middle;\n        } else {\n            left = middle;\n        }\n        middle = Math.floor((left + right) / 2);\n    }\n    return slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(editor, positions[right], parentRangeBoundary);\n};\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */ var withReact = function withReact(editor) {\n    var clipboardFormatKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"x-slate-fragment\";\n    var e = editor;\n    var { apply, onChange, deleteBackward, addMark, removeMark } = e;\n    // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n    // avoid collisions between editors in the DOM that share the same value.\n    EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap());\n    e.addMark = (key, value)=>{\n        var _EDITOR_TO_SCHEDULE_F, _EDITOR_TO_PENDING_DI;\n        (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(e)) === null || _EDITOR_TO_SCHEDULE_F === void 0 || _EDITOR_TO_SCHEDULE_F();\n        if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length) {\n            // Ensure the current pending diffs originating from changes before the addMark\n            // are applied with the current formatting\n            EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);\n        }\n        EDITOR_TO_USER_MARKS.delete(e);\n        addMark(key, value);\n    };\n    e.removeMark = (key)=>{\n        var _EDITOR_TO_PENDING_DI2;\n        if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI2 !== void 0 && _EDITOR_TO_PENDING_DI2.length) {\n            // Ensure the current pending diffs originating from changes before the addMark\n            // are applied with the current formatting\n            EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);\n        }\n        EDITOR_TO_USER_MARKS.delete(e);\n        removeMark(key);\n    };\n    e.deleteBackward = (unit)=>{\n        if (unit !== \"line\") {\n            return deleteBackward(unit);\n        }\n        if (e.selection && slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(e.selection)) {\n            var parentBlockEntry = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.above(e, {\n                match: (n)=>slate__WEBPACK_IMPORTED_MODULE_7__.Element.isElement(n) && slate__WEBPACK_IMPORTED_MODULE_7__.Editor.isBlock(e, n),\n                at: e.selection\n            });\n            if (parentBlockEntry) {\n                var [, parentBlockPath] = parentBlockEntry;\n                var parentElementRange = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.range(e, parentBlockPath, e.selection.anchor);\n                var currentLineRange = findCurrentLineRange(e, parentElementRange);\n                if (!slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(currentLineRange)) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.delete(e, {\n                        at: currentLineRange\n                    });\n                }\n            }\n        }\n    };\n    // This attempts to reset the NODE_TO_KEY entry to the correct value\n    // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry\n    e.apply = (op)=>{\n        var matches = [];\n        var pathRefMatches = [];\n        var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(e);\n        if (pendingDiffs !== null && pendingDiffs !== void 0 && pendingDiffs.length) {\n            var transformed = pendingDiffs.map((textDiff)=>transformTextDiff(textDiff, op)).filter(Boolean);\n            EDITOR_TO_PENDING_DIFFS.set(e, transformed);\n        }\n        var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(e);\n        if (pendingSelection) {\n            EDITOR_TO_PENDING_SELECTION.set(e, transformPendingRange(e, pendingSelection, op));\n        }\n        var pendingAction = EDITOR_TO_PENDING_ACTION.get(e);\n        if (pendingAction !== null && pendingAction !== void 0 && pendingAction.at) {\n            var at = slate__WEBPACK_IMPORTED_MODULE_7__.Point.isPoint(pendingAction === null || pendingAction === void 0 ? void 0 : pendingAction.at) ? transformPendingPoint(e, pendingAction.at, op) : transformPendingRange(e, pendingAction.at, op);\n            EDITOR_TO_PENDING_ACTION.set(e, at ? _objectSpread(_objectSpread({}, pendingAction), {}, {\n                at\n            }) : null);\n        }\n        switch(op.type){\n            case \"insert_text\":\n            case \"remove_text\":\n            case \"set_node\":\n            case \"split_node\":\n                {\n                    matches.push(...getMatches(e, op.path));\n                    break;\n                }\n            case \"set_selection\":\n                {\n                    var _EDITOR_TO_USER_SELEC;\n                    // Selection was manually set, don't restore the user selection after the change.\n                    (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(e)) === null || _EDITOR_TO_USER_SELEC === void 0 || _EDITOR_TO_USER_SELEC.unref();\n                    EDITOR_TO_USER_SELECTION.delete(e);\n                    break;\n                }\n            case \"insert_node\":\n            case \"remove_node\":\n                {\n                    matches.push(...getMatches(e, slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(op.path)));\n                    break;\n                }\n            case \"merge_node\":\n                {\n                    var prevPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.previous(op.path);\n                    matches.push(...getMatches(e, prevPath));\n                    break;\n                }\n            case \"move_node\":\n                {\n                    var commonPath = slate__WEBPACK_IMPORTED_MODULE_7__.Path.common(slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(op.path), slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(op.newPath));\n                    matches.push(...getMatches(e, commonPath));\n                    var changedPath;\n                    if (slate__WEBPACK_IMPORTED_MODULE_7__.Path.isBefore(op.path, op.newPath)) {\n                        matches.push(...getMatches(e, slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(op.path)));\n                        changedPath = op.newPath;\n                    } else {\n                        matches.push(...getMatches(e, slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(op.newPath)));\n                        changedPath = op.path;\n                    }\n                    var changedNode = slate__WEBPACK_IMPORTED_MODULE_7__.Node.get(editor, slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(changedPath));\n                    var changedNodeKey = ReactEditor.findKey(e, changedNode);\n                    var changedPathRef = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.pathRef(e, slate__WEBPACK_IMPORTED_MODULE_7__.Path.parent(changedPath));\n                    pathRefMatches.push([\n                        changedPathRef,\n                        changedNodeKey\n                    ]);\n                    break;\n                }\n        }\n        apply(op);\n        for (var [path, key] of matches){\n            var [node] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.node(e, path);\n            NODE_TO_KEY.set(node, key);\n        }\n        for (var [pathRef, _key] of pathRefMatches){\n            if (pathRef.current) {\n                var [_node] = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.node(e, pathRef.current);\n                NODE_TO_KEY.set(_node, _key);\n            }\n        }\n    };\n    e.setFragmentData = (data)=>{\n        var { selection } = e;\n        if (!selection) {\n            return;\n        }\n        var [start, end] = slate__WEBPACK_IMPORTED_MODULE_7__.Range.edges(selection);\n        var startVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(e, {\n            at: start.path\n        });\n        var endVoid = slate__WEBPACK_IMPORTED_MODULE_7__.Editor.void(e, {\n            at: end.path\n        });\n        if (slate__WEBPACK_IMPORTED_MODULE_7__.Range.isCollapsed(selection) && !startVoid) {\n            return;\n        }\n        // Create a fake selection so that we can add a Base64-encoded copy of the\n        // fragment to the HTML, to decode on future pastes.\n        var domRange = ReactEditor.toDOMRange(e, selection);\n        var contents = domRange.cloneContents();\n        var attach = contents.childNodes[0];\n        // Make sure attach is non-empty, since empty nodes will not get copied.\n        contents.childNodes.forEach((node)=>{\n            if (node.textContent && node.textContent.trim() !== \"\") {\n                attach = node;\n            }\n        });\n        // COMPAT: If the end node is a void node, we need to move the end of the\n        // range from the void node's spacer span, to the end of the void node's\n        // content, since the spacer is before void's content in the DOM.\n        if (endVoid) {\n            var [voidNode] = endVoid;\n            var r = domRange.cloneRange();\n            var domNode = ReactEditor.toDOMNode(e, voidNode);\n            r.setEndAfter(domNode);\n            contents = r.cloneContents();\n        }\n        // COMPAT: If the start node is a void node, we need to attach the encoded\n        // fragment to the void node's content node instead of the spacer, because\n        // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n        // most browsers. (2018/04/27)\n        if (startVoid) {\n            attach = contents.querySelector(\"[data-slate-spacer]\");\n        }\n        // Remove any zero-width space spans from the cloned DOM so that they don't\n        // show up elsewhere when pasted.\n        Array.from(contents.querySelectorAll(\"[data-slate-zero-width]\")).forEach((zw)=>{\n            var isNewline = zw.getAttribute(\"data-slate-zero-width\") === \"n\";\n            zw.textContent = isNewline ? \"\\n\" : \"\";\n        });\n        // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n        // in the HTML, and can be used for intra-Slate pasting. If it's a text\n        // node, wrap it in a `<span>` so we have something to set an attribute on.\n        if (isDOMText(attach)) {\n            var span = attach.ownerDocument.createElement(\"span\");\n            // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n            // then leading and trailing spaces will be ignored. (2017/09/21)\n            span.style.whiteSpace = \"pre\";\n            span.appendChild(attach);\n            contents.appendChild(span);\n            attach = span;\n        }\n        var fragment = e.getFragment();\n        var string = JSON.stringify(fragment);\n        var encoded = window.btoa(encodeURIComponent(string));\n        attach.setAttribute(\"data-slate-fragment\", encoded);\n        data.setData(\"application/\".concat(clipboardFormatKey), encoded);\n        // Add the content to a <div> so that we can get its inner HTML.\n        var div = contents.ownerDocument.createElement(\"div\");\n        div.appendChild(contents);\n        div.setAttribute(\"hidden\", \"true\");\n        contents.ownerDocument.body.appendChild(div);\n        data.setData(\"text/html\", div.innerHTML);\n        data.setData(\"text/plain\", getPlainText(div));\n        contents.ownerDocument.body.removeChild(div);\n        return data;\n    };\n    e.insertData = (data)=>{\n        if (!e.insertFragmentData(data)) {\n            e.insertTextData(data);\n        }\n    };\n    e.insertFragmentData = (data)=>{\n        /**\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\n     */ var fragment = data.getData(\"application/\".concat(clipboardFormatKey)) || getSlateFragmentAttribute(data);\n        if (fragment) {\n            var decoded = decodeURIComponent(window.atob(fragment));\n            var parsed = JSON.parse(decoded);\n            e.insertFragment(parsed);\n            return true;\n        }\n        return false;\n    };\n    e.insertTextData = (data)=>{\n        var text = data.getData(\"text/plain\");\n        if (text) {\n            var lines = text.split(/\\r\\n|\\r|\\n/);\n            var split = false;\n            for (var line of lines){\n                if (split) {\n                    slate__WEBPACK_IMPORTED_MODULE_7__.Transforms.splitNodes(e, {\n                        always: true\n                    });\n                }\n                e.insertText(line);\n                split = true;\n            }\n            return true;\n        }\n        return false;\n    };\n    e.onChange = (options)=>{\n        // COMPAT: React < 18 doesn't batch `setState` hook calls, which means\n        // that the children and selection can get out of sync for one render\n        // pass. So we have to use this unstable API to ensure it batches them.\n        // (2019/12/03)\n        // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n        var maybeBatchUpdates = REACT_MAJOR_VERSION < 18 ? (react_dom__WEBPACK_IMPORTED_MODULE_6___default().unstable_batchedUpdates) : (callback)=>callback();\n        maybeBatchUpdates(()=>{\n            var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n            if (onContextChange) {\n                onContextChange(options);\n            }\n            onChange(options);\n        });\n    };\n    return e;\n};\nvar getMatches = (e, path)=>{\n    var matches = [];\n    for (var [n, p] of slate__WEBPACK_IMPORTED_MODULE_7__.Editor.levels(e, {\n        at: path\n    })){\n        var key = ReactEditor.findKey(e, n);\n        matches.push([\n            p,\n            key\n        ]);\n    }\n    return matches;\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate-react/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/slate-react/node_modules/is-hotkey/lib/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/slate-react/node_modules/is-hotkey/lib/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Constants.\n */ var IS_MAC =  false && 0;\nvar MODIFIERS = {\n    alt: \"altKey\",\n    control: \"ctrlKey\",\n    meta: \"metaKey\",\n    shift: \"shiftKey\"\n};\nvar ALIASES = {\n    add: \"+\",\n    break: \"pause\",\n    cmd: \"meta\",\n    command: \"meta\",\n    ctl: \"control\",\n    ctrl: \"control\",\n    del: \"delete\",\n    down: \"arrowdown\",\n    esc: \"escape\",\n    ins: \"insert\",\n    left: \"arrowleft\",\n    mod: IS_MAC ? \"meta\" : \"control\",\n    opt: \"alt\",\n    option: \"alt\",\n    return: \"enter\",\n    right: \"arrowright\",\n    space: \" \",\n    spacebar: \" \",\n    up: \"arrowup\",\n    win: \"meta\",\n    windows: \"meta\"\n};\nvar CODES = {\n    backspace: 8,\n    tab: 9,\n    enter: 13,\n    shift: 16,\n    control: 17,\n    alt: 18,\n    pause: 19,\n    capslock: 20,\n    escape: 27,\n    \" \": 32,\n    pageup: 33,\n    pagedown: 34,\n    end: 35,\n    home: 36,\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    insert: 45,\n    delete: 46,\n    meta: 91,\n    numlock: 144,\n    scrolllock: 145,\n    \";\": 186,\n    \"=\": 187,\n    \",\": 188,\n    \"-\": 189,\n    \".\": 190,\n    \"/\": 191,\n    \"`\": 192,\n    \"[\": 219,\n    \"\\\\\": 220,\n    \"]\": 221,\n    \"'\": 222\n};\nfor(var f = 1; f < 20; f++){\n    CODES[\"f\" + f] = 111 + f;\n}\n/**\n * Is hotkey?\n */ function isHotkey(hotkey, options, event) {\n    if (options && !(\"byKey\" in options)) {\n        event = options;\n        options = null;\n    }\n    if (!Array.isArray(hotkey)) {\n        hotkey = [\n            hotkey\n        ];\n    }\n    var array = hotkey.map(function(string) {\n        return parseHotkey(string, options);\n    });\n    var check = function check(e) {\n        return array.some(function(object) {\n            return compareHotkey(object, e);\n        });\n    };\n    var ret = event == null ? check : check(event);\n    return ret;\n}\nfunction isCodeHotkey(hotkey, event) {\n    return isHotkey(hotkey, event);\n}\nfunction isKeyHotkey(hotkey, event) {\n    return isHotkey(hotkey, {\n        byKey: true\n    }, event);\n}\n/**\n * Parse.\n */ function parseHotkey(hotkey, options) {\n    var byKey = options && options.byKey;\n    var ret = {};\n    // Special case to handle the `+` key since we use it as a separator.\n    hotkey = hotkey.replace(\"++\", \"+add\");\n    var values = hotkey.split(\"+\");\n    var length = values.length;\n    // Ensure that all the modifiers are set to false unless the hotkey has them.\n    for(var k in MODIFIERS){\n        ret[MODIFIERS[k]] = false;\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n        for(var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var value = _step.value;\n            var optional = value.endsWith(\"?\") && value.length > 1;\n            if (optional) {\n                value = value.slice(0, -1);\n            }\n            var name = toKeyName(value);\n            var modifier = MODIFIERS[name];\n            if (value.length > 1 && !modifier && !ALIASES[value] && !CODES[name]) {\n                throw new TypeError('Unknown modifier: \"' + value + '\"');\n            }\n            if (length === 1 || !modifier) {\n                if (byKey) {\n                    ret.key = name;\n                } else {\n                    ret.which = toKeyCode(value);\n                }\n            }\n            if (modifier) {\n                ret[modifier] = optional ? null : true;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Compare.\n */ function compareHotkey(object, event) {\n    for(var key in object){\n        var expected = object[key];\n        var actual = void 0;\n        if (expected == null) {\n            continue;\n        }\n        if (key === \"key\" && event.key != null) {\n            actual = event.key.toLowerCase();\n        } else if (key === \"which\") {\n            actual = expected === 91 && event.which === 93 ? 91 : event.which;\n        } else {\n            actual = event[key];\n        }\n        if (actual == null && expected === false) {\n            continue;\n        }\n        if (actual !== expected) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Utils.\n */ function toKeyCode(name) {\n    name = toKeyName(name);\n    var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n    return code;\n}\nfunction toKeyName(name) {\n    name = name.toLowerCase();\n    name = ALIASES[name] || name;\n    return name;\n}\n/**\n * Export.\n */ exports[\"default\"] = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate-react/node_modules/is-hotkey/lib/index.js\n");

/***/ })

};
;